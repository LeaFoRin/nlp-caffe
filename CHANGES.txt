git diff d02bb2c --name-status
M	.gitignore
M	README.md
A	examples/language_model/create_lm.py
A	examples/language_model/lm_visualization.ipynb
A	examples/language_model/train_lm.sh
M	include/caffe/common_layers.hpp
M	include/caffe/net.hpp
M	include/caffe/test/test_gradient_check_util.hpp
M	include/caffe/util/math_functions.hpp
M	include/caffe/vision_layers.hpp
M	python/caffe/classifier.py
M	src/caffe/layers/concat_layer.cpp
M	src/caffe/layers/concat_layer.cu
A	src/caffe/layers/lstm_layer.cpp
A	src/caffe/layers/lstm_layer.cu
M	src/caffe/layers/slice_layer.cpp
M	src/caffe/layers/slice_layer.cu
A	src/caffe/layers/wordvec_layer.cpp
A	src/caffe/layers/wordvec_layer.cu
M	src/caffe/net.cpp
M	src/caffe/proto/caffe.proto
M	src/caffe/solver.cpp
M	src/caffe/test/test_gradient_based_solver.cpp
A	src/caffe/test/test_lstm_layer.cpp
M	src/caffe/test/test_net.cpp
M	src/caffe/test/test_slice_layer.cpp
A	src/caffe/test/test_wordvec_layer.cpp
M	src/caffe/util/math_functions.cu

git diff d02bb2c
diff --git a/.gitignore b/.gitignore
index 28f2aca..5950eed 100644
--- a/.gitignore
+++ b/.gitignore
@@ -59,12 +59,15 @@ Makefile.config
 # 1. reference, and not casually committed
 # 2. custom, and live on their own unless they're deliberated contributed
 data/*
-models/*
+#models/*
 *.caffemodel
 *.solverstate
 *.binaryproto
 *leveldb
 *lmdb
+*mdb
+*lock
+*prototxt
 
 # build, distribute, and bins (+ python proto bindings)
 build
@@ -84,6 +87,17 @@ _site
 doxygen
 docs/dev
 
+# Sublime Text settings
+*.sublime-workspace
+*.sublime-project
+
+# Eclipse Project settings
+*.*project
+
+# CMake generated files
+*.gen.cmake
+
+=======
 # LevelDB files
 *.sst
 *.ldb
diff --git a/README.md b/README.md
index ebec286..9805d34 100644
--- a/README.md
+++ b/README.md
@@ -1,34 +1,44 @@
-# Caffe
+# NLP-Caffe
 
-Caffe is a deep learning framework made with expression, speed, and modularity in mind.
-It is developed by the Berkeley Vision and Learning Center ([BVLC](http://bvlc.eecs.berkeley.edu)) and community contributors.
+NLP-Caffe is a <a href="https://github.com/Russell91/nlp_caffe/blob/master/CHANGES.txt" target="_blank">pull request</a> [1] on the Caffe framework developed by Yangqing Jia and Evan Shelhamer, among other members of the BVLC lab at Berkeley and a large number of independent online contributers. 
 
-Check out the [project site](http://caffe.berkeleyvision.org) for all the details like
+This fork makes it easier for NLP users to get started without merging C++ code. The current example constructs a language model for a small subset of Google's Billion Word corpus. It uses a two-layer LSTM architecture that processes in excess of 15,000 words per second [2], and achieves a perplexity of 79. More examples for Machine Translation using the encoder-decoder model and character-level RNNs are in the works. Hopefully, this code will eventually be merged into the Caffe master branch. This work was funded by the <a href="http://nlp.stanford.edu/" target="_blank">Stanford NLP Group</a>, under the guidance of <a href="http://nlp.stanford.edu/~manning/" target="_blank">Chris Manning</a>, and with the invaluable expertise of <a href="http://stanford.edu/~lmthang/" target="_blank">Thang Luong</a>.
 
-- [DIY Deep Learning for Vision with Caffe](https://docs.google.com/presentation/d/1UeKXVgRvvxg9OUdh_UiC5G71UMscNPlvArsWER41PsU/edit#slide=id.p)
-- [Tutorial Documentation](http://caffe.berkeleyvision.org/tutorial/)
-- [BVLC reference models](http://caffe.berkeleyvision.org/model_zoo.html) and the [community model zoo](https://github.com/BVLC/caffe/wiki/Model-Zoo)
-- [Installation instructions](http://caffe.berkeleyvision.org/installation.html)
+# Installation
 
-and step-by-step examples.
+We recommend consulting the Caffe <a href="http://caffe.berkeleyvision.org/installation.html" target="_blank">installation instructions</a> and compiling the standard Caffe library first. Next, clone this repo and run `make -j8 && make pycaffe` from the NLP-Caffe folder.
 
-[![Join the chat at https://gitter.im/BVLC/caffe](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/BVLC/caffe?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
+NLP-Caffe also requires <a href="https://github.com/dw/py-lmdb/" target="_blank">py-lmdb</a> at runtime, which can be installed with:
 
-Please join the [caffe-users group](https://groups.google.com/forum/#!forum/caffe-users) or [gitter chat](https://gitter.im/BVLC/caffe) to ask questions and talk about methods and models.
-Framework development discussions and thorough bug reports are collected on [Issues](https://github.com/BVLC/caffe/issues).
+    pip install py-lmdb
 
-Happy brewing!
+# Tutorial
 
-## License and Citation
+First, cd to the caffe root directory and download the data for the model with:
 
-Caffe is released under the [BSD 2-Clause license](https://github.com/BVLC/caffe/blob/master/LICENSE).
-The BVLC reference models are released for unrestricted use.
+    ./data/language_model/get_lm.sh
 
-Please cite Caffe in your publications if it helps your research:
+Using this data, you can generate the LMDB databases and the architecture train_val.prototxt with:
 
-    @article{jia2014caffe,
-      Author = {Jia, Yangqing and Shelhamer, Evan and Donahue, Jeff and Karayev, Sergey and Long, Jonathan and Girshick, Ross and Guadarrama, Sergio and Darrell, Trevor},
-      Journal = {arXiv preprint arXiv:1408.5093},
-      Title = {Caffe: Convolutional Architecture for Fast Feature Embedding},
-      Year = {2014}
-    }
+    python ./examples/launguage_model/create_lm.py --make_data
+
+You'll notice this generates train, test, and validation databases in examples/ptb. It also generates the train_val.prototxt architecture file and the solver.prototxt hyperparameter file. By editing this file, you can control the hyperparameters, dataset, and architecture used by NLP-Caffe with a python interface.
+
+You can now begin to train the network with:
+
+    ./examples/language_model/train_lm.sh
+
+The resulting wordvectors can be viewed with:
+
+    ipython notebook ./examples/language_model/lm_visualization.ipynb
+
+# Further reading
+
+To get a better general understanding of how Caffe works, you can take advantage of the content in the <a href="http://caffe.berkeleyvision.org/installation.html" target="_blank">caffe tutorials section</a>. In particular, the <a href="http://nbviewer.ipython.org/github/BVLC/caffe/blob/master/examples/filter_visualization.ipynb" target="_blank">filter visualization tutorial</a> is a great example of how you can use the IPython notebook to investigate the weights and performance of a trained model. The <a href="http://caffe.berkeleyvision.org/gathered/examples/mnist.html" target="_blank">MNIST tutorial</a> is useful to understand how you can control Caffe over the command line and through architecture description text files.
+
+<br>
+<br>
+
+[1] All citations should be addressed to the <a href="https://github.com/BVLC/caffe" target="_blank">main Caffe repository</a>. Licensing is identical to that of a Caffe pull request.
+
+[2] The average sentence has 22.2 words when long sentences are capped to 30 words. We train batches of 128 sentences with an average batch time of 0.166 s on a Nvidia GTX 780 TI.
diff --git a/examples/language_model/create_lm.py b/examples/language_model/create_lm.py
new file mode 100755
index 0000000..13a7f15
--- /dev/null
+++ b/examples/language_model/create_lm.py
@@ -0,0 +1,336 @@
+#!/usr/bin/env python
+import sys
+import lmdb
+import random
+import subprocess
+import itertools
+import argparse
+import numpy as np
+sys.path.append('python/caffe/proto'); import caffe_pb2
+
+from caffe_pb2 import NetParameter, LayerParameter, DataParameter, SolverParameter, ParamSpec
+from caffe_pb2 import Datum
+
+def make_data(param):
+    for phase in ['train', 'valid', 'test']:
+        print 'Starting %s' % phase
+        db_name = './examples/language_model/lm_%s_db' % phase
+        subprocess.call(['rm', '-rf', db_name])
+        env = lmdb.open(db_name, map_size=2147483648*8)
+
+        def vocab_transform(target_input):
+            def t_foo(x):
+                return x if x < param['unknown_symbol'] else param['unknown_symbol']
+
+            target_line = [t_foo(int(x)) for x in target_input.split(' ')[:param['maximum_length']]]
+
+            target_line = target_line[:param['maximum_length']] + \
+                          [param['zero_symbol']] * (param['maximum_length'] - len(target_line[:param['maximum_length']]))
+            assert len(target_line) == param['maximum_length']
+            return target_line
+
+        allX = []
+        with open('./data/language_model/%s_indices.txt' % phase, 'r') as f1:
+            for en in f1.readlines():
+                allX.append(vocab_transform(en))
+
+        print 'Writing %s sentences' % len(allX)
+
+        with env.begin(write=True) as txn:
+            for i, target_line in enumerate(allX):
+                datum = Datum()
+                datum.channels = 2 * param['maximum_length']
+                datum.width = 1
+                datum.height = 1
+                for j in range(param['maximum_length']):
+                    if j == 0:
+                        datum.float_data.append(param['start_symbol'])
+                    else:
+                        datum.float_data.append(target_line[j - 1])
+                for j in range(param['maximum_length']):
+                    datum.float_data.append(target_line[j])
+                key = str(i)
+                txn.put(key, datum.SerializeToString())
+
+def get_solver(param):
+    solver = SolverParameter()
+    solver.net = param['file_train_val_net']
+    solver.test_interval = param['solver_test_interval']
+    solver.base_lr = param['solver_base_lr']
+    solver.weight_decay = param['solver_weight_decay']
+    solver.lr_policy = param['solver_lr_policy']
+    solver.display = param['solver_display']
+    solver.max_iter = param['solver_max_iter']
+    solver.clip_gradients = param['solver_clip_gradients']
+    solver.snapshot = param['solver_snapshot']
+    solver.lr_policy = param['solver_lr_policy']
+    solver.stepsize = param['solver_stepsize']
+    solver.gamma = param['solver_gamma']
+    solver.snapshot_prefix = param['solver_snapshot_prefix']
+    solver.random_seed = param['solver_random_seed']
+    solver.solver_mode = param['solver_solver_mode']
+    solver.test_iter.append(param['solver_test_iter'])
+    return solver
+
+
+def get_net(param, deploy, batch_size):
+    net = NetParameter()
+
+    def add_weight_filler(param, max_value=param['init_range']):
+        param.type = 'uniform'
+        param.min = -max_value
+        param.max = max_value
+
+    if not deploy:
+        train_data = net.layer.add()
+        train_data.type = "Data"
+        train_data.name = "data"
+        train_data.top.append(train_data.name)
+        train_data.data_param.source = 'examples/language_model/lm_train_db'
+        train_data.data_param.backend = DataParameter.LMDB
+        train_data.data_param.batch_size = batch_size
+
+        test_data = net.layer.add()
+        test_data.type = "Data"
+        test_data.name = "data"
+        test_data.top.append(test_data.name)
+        test_data.data_param.source = 'examples/language_model/lm_valid_db'
+        test_data.data_param.backend = DataParameter.LMDB
+        test_data.data_param.batch_size = batch_size
+
+        test_data_rule = test_data.include.add()
+        test_data_rule.phase = caffe_pb2.TEST
+        train_data_rule = train_data.include.add()
+        train_data_rule.phase = caffe_pb2.TRAIN
+
+
+    data_slice_layer = net.layer.add()
+    data_slice_layer.name = "data_slice_layer"
+    data_slice_layer.type = "Slice"
+    data_slice_layer.slice_param.slice_dim = 1
+    data_slice_layer.bottom.append('data')
+    data_slice_layer.top.append('input_words')
+    data_slice_layer.top.append('target_words')
+    data_slice_layer.slice_param.slice_point.append(param['maximum_length'])
+
+    label_slice_layer = net.layer.add()
+    label_slice_layer.name = "label_slice_layer"
+    label_slice_layer.type = "Slice"
+    label_slice_layer.slice_param.slice_dim = 1
+    label_slice_layer.bottom.append('target_words')
+    for i in range(param['maximum_length']):
+        label_slice_layer.top.append('label%d' % i)
+        if i != 0:
+            label_slice_layer.slice_param.slice_point.append(i)
+
+    wordvec_layer = net.layer.add()
+    wordvec_layer.name = "wordvec_layer"
+    wordvec_layer.type = "Wordvec"
+    wordvec_layer.bottom.append('input_words')
+    wordvec_layer.top.append(wordvec_layer.name)
+    wordvec_layer.wordvec_param.dimension = param['wordvec_length']
+    wordvec_layer.wordvec_param.vocab_size = param['vocab_size']
+    add_weight_filler(wordvec_layer.wordvec_param.weight_filler)
+
+    wordvec_slice_layer = net.layer.add()
+    wordvec_slice_layer.name = "wordvec_slice_layer"
+    wordvec_slice_layer.type = "Slice"
+    wordvec_slice_layer.slice_param.slice_dim = 2
+    wordvec_slice_layer.slice_param.fast_wordvec_slice = True
+    wordvec_slice_layer.bottom.append('wordvec_layer')
+    for i in range(param['maximum_length']):
+        wordvec_slice_layer.top.append('target_wordvec%d' % i)
+        if i != 0:
+            wordvec_slice_layer.slice_param.slice_point.append(i)
+
+
+    for i in range(param['maximum_length']):
+        if i == 0:
+            dummy_layer = net.layer.add()
+            dummy_layer.name = 'dummy_layer'
+            dummy_layer.top.append(dummy_layer.name)
+            dummy_layer.type = "DummyData"
+            dummy_layer.dummy_data_param.num.append(batch_size)
+            dummy_layer.dummy_data_param.channels.append(param['lstm_num_cells'])
+            dummy_layer.dummy_data_param.height.append(1)
+            dummy_layer.dummy_data_param.width.append(1)
+
+            dummy_mem_cell = net.layer.add()
+            dummy_mem_cell.name = 'dummy_mem_cell'
+            dummy_mem_cell.top.append(dummy_mem_cell.name)
+            dummy_mem_cell.type = "DummyData"
+            dummy_mem_cell.dummy_data_param.num.append(batch_size)
+            dummy_mem_cell.dummy_data_param.channels.append(param['lstm_num_cells'])
+            dummy_mem_cell.dummy_data_param.height.append(1)
+            dummy_mem_cell.dummy_data_param.width.append(1)
+
+
+        for j in range(param['num_lstm_stacks']):
+            concat_layer = net.layer.add()
+            concat_layer.name = 'concat%d_layer%d' % (j, i)
+
+            concat_layer.top.append(concat_layer.name)
+            concat_layer.type = "Concat"
+            concat_layer.concat_param.fast_lstm_concat = True
+            if j == 0:
+                concat_layer.bottom.append('target_wordvec%d' % i)
+            if j >= 1:
+                concat_layer.bottom.append('dropout%d_%d' % (j - 1, i))
+            if i == 0:
+                concat_layer.bottom.append(dummy_layer.name)
+            else:
+                concat_layer.bottom.append('lstm%d_hidden%d' % (j, i - 1))
+
+            lstm_layer = net.layer.add()
+            lstm_layer.name = 'lstm%d_layer%d' % (j, i)
+            lstm_layer.type = "Lstm"
+            lstm_layer.lstm_param.num_cells = param['lstm_num_cells']
+
+            add_weight_filler(lstm_layer.lstm_param.input_weight_filler)
+            add_weight_filler(lstm_layer.lstm_param.input_gate_weight_filler)
+            add_weight_filler(lstm_layer.lstm_param.forget_gate_weight_filler)
+            add_weight_filler(lstm_layer.lstm_param.output_gate_weight_filler)
+
+            for k in range(4):
+                param_spec = lstm_layer.param.add()
+                param_spec.name = 'lstm%d_param_%d' % (j, k)
+            lstm_layer.top.append('lstm%d_hidden%d' % (j, i))
+            lstm_layer.top.append('lstm%d_mem_cell%d' % (j, i))
+            lstm_layer.bottom.append('concat%d_layer%d' % (j, i))
+            if i == 0:
+                lstm_layer.bottom.append('dummy_mem_cell')
+            else:
+                lstm_layer.bottom.append('lstm%d_mem_cell%d' % (j, i - 1))
+
+            dropout_layer = net.layer.add()
+            dropout_layer.name = 'dropout%d_%d' % (j, i)
+            dropout_layer.type = "Dropout"
+            dropout_layer.top.append(dropout_layer.name)
+            dropout_layer.bottom.append('lstm%d_hidden%d' % (j, i))
+            dropout_layer.dropout_param.dropout_ratio = param['dropout_ratio']
+
+    hidden_concat_layer = net.layer.add()
+    hidden_concat_layer.type = "Concat"
+    hidden_concat_layer.name = 'hidden_concat'
+    hidden_concat_layer.top.append(hidden_concat_layer.name)
+    hidden_concat_layer.concat_param.concat_dim = 0
+    for i in range(param['maximum_length']):
+        hidden_concat_layer.bottom.append('dropout%d_%d' % (param['num_lstm_stacks'] - 1, i))
+
+    inner_product_layer = net.layer.add()
+    inner_product_layer.name = "inner_product"
+    inner_product_layer.top.append(inner_product_layer.name)
+    inner_product_layer.bottom.append('hidden_concat')
+    inner_product_layer.type = "InnerProduct"
+    inner_product_layer.inner_product_param.bias_term = False
+    inner_product_layer.inner_product_param.num_output = param['vocab_size']
+    add_weight_filler(inner_product_layer.inner_product_param.weight_filler)
+
+    label_concat_layer = net.layer.add()
+    label_concat_layer.name = "label_concat"
+    label_concat_layer.type = "Concat"
+    label_concat_layer.concat_param.concat_dim = 0
+    label_concat_layer.top.append(label_concat_layer.name)
+    for i in range(param['maximum_length']):
+        label_concat_layer.bottom.append('label%d' % i)
+
+    if deploy:
+        word_prob_layer = net.layer.add()
+        word_prob_layer.name = "word_probs"
+        word_prob_layer.top.append(word_prob_layer.name)
+        word_prob_layer.type = "Softmax"
+        word_prob_layer.bottom.append("inner_product")
+
+    else:
+        word_loss_layer = net.layer.add()
+        word_loss_layer.name = "word_loss"
+        word_loss_layer.type = "SoftmaxWithLoss"
+        word_loss_layer.bottom.append("inner_product")
+        word_loss_layer.bottom.append("label_concat")
+        word_loss_layer.top.append(word_loss_layer.name)
+        word_loss_layer.loss_param.ignore_label = param['zero_symbol']
+
+    silence_layer = net.layer.add()
+    silence_layer.name = "silence"
+    silence_layer.type = "Silence"
+    for j in range(param['num_lstm_stacks']):
+        silence_layer.bottom.append("lstm%d_mem_cell%d" % (j, param['maximum_length'] - 1))
+    for j in range(param['num_lstm_stacks'] - 1):
+        silence_layer.bottom.append("dropout%d_%d" % (j, param['maximum_length'] - 1))
+
+    return net
+
+def write_solver(param):
+    with open(param['file_solver'], 'w') as f:
+        f.write(str(get_solver(param)))
+
+def write_net(param):
+    with open(param['file_train_val_net'], 'w') as f:
+        f.write('name: "%s"\n' % param['net_name'])
+        f.write(str(get_net(param, deploy=False, batch_size = param['train_batch_size'])))
+
+    with open(param['file_deploy_net'], 'w') as f:
+        f.write('name: "%s"\n' % param['net_name'])
+        f.write('''
+input: "data"
+input_dim: %s
+input_dim: %s
+input_dim: 1
+input_dim: 1
+
+''' % (param['deploy_batch_size'], 2 * param['maximum_length']))
+        f.write(str(get_net(param, deploy=True, batch_size = param['deploy_batch_size'])))
+
+
+def get_base_param():
+    param = {}
+    param['net_name'] = "ManningNet"
+    param['maximum_length'] = 30
+    param['vocab_size'] = 10003
+    param['num_lstm_stacks'] = 2
+
+    param['unknown_symbol'] = param['vocab_size'] - 3
+    param['start_symbol'] = param['vocab_size'] - 2
+    param['zero_symbol'] = param['vocab_size'] - 1
+
+    param['train_batch_size'] = 128
+    param['deploy_batch_size'] = 128
+    param['lstm_num_cells'] = 250
+    param['wordvec_length'] = 250
+    param['dropout_ratio'] = 0.16
+    param['init_range'] = 0.14
+
+    param['file_solver'] = "examples/language_model/solver.prototxt"
+    param['file_train_val_net'] = "examples/language_model/train_val.prototxt"
+    param['file_deploy_net'] = "examples/language_model/deploy.prototxt"
+    param['solver_base_lr'] = 29.13
+    param['solver_weight_decay'] = 1.6 * 10 ** (-6)
+    param['solver_lr_policy'] = "fixed"
+    param['solver_display'] = 100
+    param['solver_max_iter'] = 20000
+    param['solver_clip_gradients'] = 0.24
+    param['solver_snapshot'] = 1000
+    param['solver_lr_policy'] = 'step'
+    param['solver_stepsize'] = 2500
+    param['solver_gamma'] = 0.792
+    param['solver_snapshot_prefix'] = "examples/language_model/lm"
+    param['solver_random_seed'] = 22
+    param['solver_solver_mode'] = SolverParameter.GPU
+    param['solver_test_interval'] = 1000
+    param['solver_test_iter'] = 200
+    return param
+
+def prepare(param):
+    write_solver(param)
+    write_net(param)
+
+def main():
+    parser = argparse.ArgumentParser()
+    parser.add_argument('--make_data', action='store_true')
+    args = parser.parse_args()
+    if args.make_data:
+        make_data(get_base_param())
+    prepare(get_base_param())
+
+if __name__ == '__main__':
+    main()
diff --git a/examples/language_model/lm_visualization.ipynb b/examples/language_model/lm_visualization.ipynb
new file mode 100644
index 0000000..5bc7980
--- /dev/null
+++ b/examples/language_model/lm_visualization.ipynb
@@ -0,0 +1,342 @@
+{
+ "metadata": {
+  "description": "Extracting features and visualizing trained filters with an example image, viewed layer-by-layer.",
+  "example_name": "Filter visualization",
+  "include_in_docs": true,
+  "priority": 2,
+  "signature": "sha256:2c2b7f9fc017f8d45b98e2d6dd2fd1361ed99fa89160d6faa244d633ecbdd21d"
+ },
+ "nbformat": 3,
+ "nbformat_minor": 0,
+ "worksheets": [
+  {
+   "cells": [
+    {
+     "cell_type": "markdown",
+     "metadata": {},
+     "source": [
+      "Running this notebook requires the user to have installed tsne and mpld3 with:\n",
+      "    \n",
+      "    pip install mpld3\n",
+      "    pip install tsne\n",
+      "    \n",
+      "Preloaded results can be viewed by scrolling down."
+     ]
+    },
+    {
+     "cell_type": "code",
+     "collapsed": false,
+     "input": [
+      "from __future__ import division\n",
+      "import numpy as np\n",
+      "import pickle\n",
+      "from tsne import bh_sne\n",
+      "%matplotlib inline\n",
+      "import matplotlib.pyplot as plt\n",
+      "import math\n",
+      "import lmdb\n",
+      "import itertools\n",
+      "\n",
+      "import mpld3\n",
+      "mpld3.enable_notebook()\n",
+      "from mpld3 import plugins\n",
+      "\n",
+      "# Make sure that caffe is on the python path:\n",
+      "caffe_root = '../../'  # this file is expected to be in {caffe_root}/examples/language_model\n",
+      "import sys\n",
+      "sys.path.insert(0, caffe_root + 'python')\n",
+      "import caffe\n",
+      "sys.path.insert(0, caffe_root + 'python/caffe/proto')\n",
+      "import caffe_pb2\n",
+      "sys.path.insert(0, caffe_root + 'examples/language_model')\n",
+      "import create_lm"
+     ],
+     "language": "python",
+     "metadata": {},
+     "outputs": [],
+     "prompt_number": 1
+    },
+    {
+     "cell_type": "code",
+     "collapsed": false,
+     "input": [
+      "base_param = create_lm.get_base_param()\n",
+      "caffe.set_mode_gpu()\n",
+      "net = caffe.Classifier(caffe_root + 'examples/language_model/deploy.prototxt',\n",
+      "                       caffe_root + 'examples/language_model/lm_iter_20000.caffemodel')"
+     ],
+     "language": "python",
+     "metadata": {},
+     "outputs": [],
+     "prompt_number": 2
+    },
+    {
+     "cell_type": "code",
+     "collapsed": false,
+     "input": [
+      "def get_datums():\n",
+      "    env = lmdb.open(caffe_root + 'examples/language_model/lm_test_db')\n",
+      "    with env.begin() as txn:\n",
+      "        cursor = txn.cursor()\n",
+      "        while cursor.next():\n",
+      "            datum = caffe_pb2.Datum()\n",
+      "            datum.ParseFromString(cursor.value())\n",
+      "            yield datum"
+     ],
+     "language": "python",
+     "metadata": {},
+     "outputs": [],
+     "prompt_number": 3
+    },
+    {
+     "cell_type": "code",
+     "collapsed": false,
+     "input": [
+      "fast_test = False\n",
+      "if fast_test:   \n",
+      "    datums = list(itertools.islice(get_datums(), 1000))\n",
+      "else:\n",
+      "    datums = list(get_datums())"
+     ],
+     "language": "python",
+     "metadata": {},
+     "outputs": [],
+     "prompt_number": 4
+    },
+    {
+     "cell_type": "code",
+     "collapsed": false,
+     "input": [
+      "def get_data(datums):\n",
+      "    n = datums[0].channels // 2\n",
+      "    for i in range(0, len(datums), base_param['deploy_batch_size']):\n",
+      "        data = np.zeros((base_param['deploy_batch_size'], 2 * n, 1, 1))\n",
+      "        for j in range(base_param['deploy_batch_size']):\n",
+      "            if (i + j) >= len(datums):\n",
+      "                return\n",
+      "            data[j, :, 0, 0] = datums[i + j].float_data\n",
+      "        yield data\n",
+      "\n",
+      "data_batches = list(get_data(datums))"
+     ],
+     "language": "python",
+     "metadata": {},
+     "outputs": [],
+     "prompt_number": 5
+    },
+    {
+     "cell_type": "code",
+     "collapsed": false,
+     "input": [
+      "def score_sentence(datum, net, net_id):\n",
+      "    n = datum.channels // 2\n",
+      "    loss = np.zeros(n,)\n",
+      "    length = 0\n",
+      "    for i in range(n):\n",
+      "        target_category_id = int(net.blobs['target_words'].data[net_id, i].flatten()[0])\n",
+      "        if target_category_id == base_param['zero_symbol']:\n",
+      "            break\n",
+      "        length += 1\n",
+      "        loss[i] = -math.log(net.blobs['word_probs'].data[net_id + base_param['deploy_batch_size'] * i, target_category_id])\n",
+      "\n",
+      "    return loss, length"
+     ],
+     "language": "python",
+     "metadata": {},
+     "outputs": [],
+     "prompt_number": 6
+    },
+    {
+     "cell_type": "code",
+     "collapsed": false,
+     "input": [
+      "losses = []\n",
+      "lengths = []\n",
+      "for i, batch in enumerate(data_batches):\n",
+      "    net.rff(batch)\n",
+      "    for j in range(len(batch)):\n",
+      "        datum = datums[j + base_param['deploy_batch_size'] * i] \n",
+      "        loss, length = score_sentence(datum, net, j)\n",
+      "        losses.append(loss)        \n",
+      "        lengths.append(length)\n",
+      "    if i % 5 == 0: print 'current loss: %s' % (np.sum(losses) / sum(lengths))\n",
+      "print 'Final perplexity %s' % math.exp(np.sum(losses) / sum(lengths))"
+     ],
+     "language": "python",
+     "metadata": {},
+     "outputs": [
+      {
+       "output_type": "stream",
+       "stream": "stdout",
+       "text": [
+        "current loss: 4.44790601249\n",
+        "current loss: 4.38745522842"
+       ]
+      },
+      {
+       "output_type": "stream",
+       "stream": "stdout",
+       "text": [
+        "\n",
+        "current loss: 4.39060992985"
+       ]
+      },
+      {
+       "output_type": "stream",
+       "stream": "stdout",
+       "text": [
+        "\n",
+        "current loss: 4.38897749584"
+       ]
+      },
+      {
+       "output_type": "stream",
+       "stream": "stdout",
+       "text": [
+        "\n",
+        "current loss: 4.38256507949"
+       ]
+      },
+      {
+       "output_type": "stream",
+       "stream": "stdout",
+       "text": [
+        "\n",
+        "Final perplexity 79.7930672093"
+       ]
+      },
+      {
+       "output_type": "stream",
+       "stream": "stdout",
+       "text": [
+        "\n"
+       ]
+      }
+     ],
+     "prompt_number": 7
+    },
+    {
+     "cell_type": "code",
+     "collapsed": false,
+     "input": [
+      "vocab = pickle.load(open(caffe_root + 'data/language_model/vocab.pkl', 'r'))\n",
+      "inv = lambda d: {v:k for k,v in d.iteritems()}\n",
+      "vocab_inv = inv(vocab)"
+     ],
+     "language": "python",
+     "metadata": {},
+     "outputs": [],
+     "prompt_number": 8
+    },
+    {
+     "cell_type": "code",
+     "collapsed": false,
+     "input": [
+      "word_vectors = {k:net.params['wordvec_layer'][0].data[0, vocab[k], 0, :] for (k, v) in vocab.items() if v < base_param['vocab_size']}\n",
+      "print sorted(word_vectors.keys(), key= lambda x: np.linalg.norm(word_vectors['four'] - word_vectors[x]))[:20]"
+     ],
+     "language": "python",
+     "metadata": {},
+     "outputs": [
+      {
+       "output_type": "stream",
+       "stream": "stdout",
+       "text": [
+        "['four', 'seven', 'five', 'eight', 'three', 'six', 'nine', 'ten', '16', 'Three', '150', 'Seven', 'Four', '41', '14', '52', '13', '450', '34', '200']\n"
+       ]
+      }
+     ],
+     "prompt_number": 9
+    },
+    {
+     "cell_type": "code",
+     "collapsed": false,
+     "input": [
+      "M = np.zeros((len(word_vectors), len(word_vectors.values()[0].flatten())))\n",
+      "for k, v in word_vectors.items():\n",
+      "    M[vocab[k], :] = v\n",
+      "\n",
+      "X_2d = bh_sne(M)"
+     ],
+     "language": "python",
+     "metadata": {},
+     "outputs": [],
+     "prompt_number": 10
+    },
+    {
+     "cell_type": "code",
+     "collapsed": false,
+     "input": [
+      "fig, ax = plt.subplots(subplot_kw=dict(axisbg='#EEEEEE'), figsize=(8,8))\n",
+      "ax.grid(color='white', linestyle='solid')\n",
+      "\n",
+      "num_words_to_plot = 500\n",
+      "\n",
+      "scatter = ax.scatter(X_2d[:num_words_to_plot, 0], X_2d[:num_words_to_plot, 1], s = 100, c='#3EEEEE', alpha=0.1, cmap=plt.cm.jet)\n",
+      "labels = [vocab_inv[i] for i in range(num_words_to_plot)]\n",
+      "plugins.connect(fig, plugins.PointLabelTooltip(scatter, labels))"
+     ],
+     "language": "python",
+     "metadata": {},
+     "outputs": [
+      {
+       "html": [
+        "\n",
+        "\n",
+        "<style>\n",
+        "\n",
+        "</style>\n",
+        "\n",
+        "<div id=\"fig_el236821401752467152165224441100\"></div>\n",
+        "<script>\n",
+        "function mpld3_load_lib(url, callback){\n",
+        "  var s = document.createElement('script');\n",
+        "  s.src = url;\n",
+        "  s.async = true;\n",
+        "  s.onreadystatechange = s.onload = callback;\n",
+        "  s.onerror = function(){console.warn(\"failed to load library \" + url);};\n",
+        "  document.getElementsByTagName(\"head\")[0].appendChild(s);\n",
+        "}\n",
+        "\n",
+        "if(typeof(mpld3) !== \"undefined\" && mpld3._mpld3IsLoaded){\n",
+        "   // already loaded: just create the figure\n",
+        "   !function(mpld3){\n",
+        "       \n",
+        "       mpld3.draw_figure(\"fig_el236821401752467152165224441100\", {\"axes\": [{\"xlim\": [-40.0, 40.0], \"yscale\": \"linear\", \"axesbg\": \"#EEEEEE\", \"texts\": [], \"zoomable\": true, \"images\": [], \"xdomain\": [-40.0, 40.0], \"ylim\": [-40.0, 40.0], \"paths\": [], \"sharey\": [], \"sharex\": [], \"axesbgalpha\": null, \"axes\": [{\"scale\": \"linear\", \"tickformat\": null, \"grid\": {\"color\": \"#FFFFFF\", \"alpha\": 1.0, \"dasharray\": \"10,0\", \"gridOn\": true}, \"fontsize\": 10.0, \"position\": \"bottom\", \"nticks\": 9, \"tickvalues\": null}, {\"scale\": \"linear\", \"tickformat\": null, \"grid\": {\"color\": \"#FFFFFF\", \"alpha\": 1.0, \"dasharray\": \"10,0\", \"gridOn\": true}, \"fontsize\": 10.0, \"position\": \"left\", \"nticks\": 9, \"tickvalues\": null}], \"lines\": [], \"markers\": [], \"id\": \"el23682140175056692368\", \"ydomain\": [-40.0, 40.0], \"collections\": [{\"paths\": [[[[0.0, -0.5], [0.13260155, -0.5], [0.25978993539242673, -0.44731684579412084], [0.3535533905932738, -0.3535533905932738], [0.44731684579412084, -0.25978993539242673], [0.5, -0.13260155], [0.5, 0.0], [0.5, 0.13260155], [0.44731684579412084, 0.25978993539242673], [0.3535533905932738, 0.3535533905932738], [0.25978993539242673, 0.44731684579412084], [0.13260155, 0.5], [0.0, 0.5], [-0.13260155, 0.5], [-0.25978993539242673, 0.44731684579412084], [-0.3535533905932738, 0.3535533905932738], [-0.44731684579412084, 0.25978993539242673], [-0.5, 0.13260155], [-0.5, 0.0], [-0.5, -0.13260155], [-0.44731684579412084, -0.25978993539242673], [-0.3535533905932738, -0.3535533905932738], [-0.25978993539242673, -0.44731684579412084], [-0.13260155, -0.5], [0.0, -0.5]], [\"M\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"Z\"]]], \"edgecolors\": [\"#000000\"], \"edgewidths\": [1.0], \"offsets\": \"data01\", \"yindex\": 1, \"id\": \"el23682140174890030096\", \"pathtransforms\": [[11.11111111111111, 0.0, 0.0, 11.11111111111111, 0.0, 0.0]], \"pathcoordinates\": \"display\", \"offsetcoordinates\": \"data\", \"zorder\": 1, \"xindex\": 0, \"alphas\": [0.1], \"facecolors\": [\"#3EEEEE\"]}], \"xscale\": \"linear\", \"bbox\": [0.125, 0.125, 0.77500000000000002, 0.77500000000000002]}], \"height\": 640.0, \"width\": 640.0, \"plugins\": [{\"type\": \"reset\"}, {\"enabled\": false, \"button\": true, \"type\": \"zoom\"}, {\"enabled\": false, \"button\": true, \"type\": \"boxzoom\"}, {\"voffset\": 10, \"labels\": [\"the\", \",\", \".\", \"to\", \"of\", \"and\", \"a\", \"in\", \"\\\"\", \"'s\", \"that\", \"for\", \"on\", \"is\", \"The\", \"was\", \"with\", \"said\", \"as\", \"at\", \"it\", \"by\", \"from\", \"be\", \"he\", \"have\", \"has\", \"his\", \"are\", \"an\", \")\", \"not\", \"(\", \"will\", \"who\", \"I\", \"had\", \"their\", \"were\", \"--\", \"they\", \"but\", \"this\", \"been\", \"more\", \"which\", \"or\", \"its\", \"would\", \"about\", \":\", \"after\", \"up\", \"one\", \"$\", \"than\", \"also\", \"her\", \"'t\", \"out\", \"you\", \"when\", \"year\", \"It\", \"people\", \"two\", \"-\", \"over\", \"can\", \"all\", \"first\", \"But\", \"into\", \"'\", \"He\", \"last\", \"A\", \"we\", \"In\", \"she\", \"other\", \"new\", \"could\", \"years\", \"there\", \"?\", \"time\", \"some\", \"them\", \"if\", \"no\", \"percent\", \"so\", \"only\", \"what\", \"government\", \"just\", \"million\", \"before\", \"him\", \"U.S.\", \"most\", \"because\", \"like\", \"now\", \"three\", \"being\", \";\", \"do\", \"against\", \"where\", \"Obama\", \"made\", \"New\", \"Mr\", \"many\", \"week\", \"off\", \"back\", \"down\", \"since\", \"told\", \"/\", \"while\", \"any\", \"our\", \"make\", \"says\", \"world\", \"get\", \"\\u00a3\", \"through\", \"We\", \"such\", \"company\", \"may\", \"those\", \"even\", \"home\", \"how\", \"say\", \"This\", \"per\", \"much\", \"should\", \"country\", \"between\", \"still\", \"including\", \"then\", \"police\", \"way\", \"during\", \"And\", \"did\", \"take\", \"next\", \"work\", \"They\", \"under\", \"my\", \"your\", \"United\", \"day\", \"well\", \"state\", \"second\", \"found\", \"Mr.\", \"very\", \"public\", \"officials\", \"former\", \"group\", \"billion\", \"four\", \"US\", \"part\", \"another\", \"around\", \"There\", \"American\", \"10\", \"help\", \"President\", \"both\", \"end\", \"Monday\", \"Tuesday\", \"Friday\", \"Wednesday\", \"these\", \"left\", \"set\", \"see\", \"months\", \"month\", \"children\", \"market\", \"good\", \"man\", \"Thursday\", \"go\", \"York\", \"going\", \"That\", \"report\", \"reported\", \"team\", \"%\", \"own\", \"money\", \"If\", \"five\", \"too\", \"game\", \"used\", \"number\", \"business\", \"same\", \"think\", \"days\", \"president\", \"China\", \"financial\", \"As\", \"called\", \"season\", \"don\", \"won\", \"me\", \"expected\", \"family\", \"long\", \"...\", \"1\", \"health\", \"need\", \"show\", \"might\", \"few\", \"She\", \"according\", \"!\", \"use\", \"least\", \"right\", \"know\", \"cent\", \"AP\", \"'re\", \"come\", \"life\", \"later\", \"States\", \"want\", \"put\", \"took\", \"came\", \"high\", \"Sunday\", \"night\", \"support\", \"points\", \"2008\", \"ago\", \"city\", \"top\", \"early\", \"case\", \"place\", \"best\", \"political\", \"For\", \"past\", \"far\", \"us\", \"already\", \"military\", \"whether\", \"without\", \"third\", \"until\", \"each\", \"2009\", \"system\", \"House\", \"British\", \"economic\", \"less\", \"Saturday\", \"companies\", \"deal\", \"court\", \"among\", \"South\", \"today\", \"away\", \"never\", \"women\", \"win\", \"30\", \"six\", \"little\", \"20\", \"London\", \"here\", \"security\", \"added\", \"got\", \"school\", \"killed\", \"At\", \"men\", \"recent\", \"campaign\", \"several\", \"news\", \"members\", \"lead\", \"chief\", \"&\", \"John\", \"information\", \"run\", \"better\", \"big\", \"every\", \"economy\", \"local\", \"change\", \"pay\", \"Washington\", \"likely\", \"On\", \"quarter\", \"power\", \"hit\", \"party\", \"2\", \"major\", \"plan\", \"start\", \"become\", \"care\", \"2007\", \"taken\", \"play\", \"half\", \"death\", \"making\", \"does\", \"announced\", \"across\", \"went\", \"area\", \"One\", \"head\", \"When\", \"prices\", \"North\", \"must\", \"England\", \"industry\", \"'ve\", \"give\", \"car\", \"sales\", \"lost\", \"final\", \"National\", \"enough\", \"though\", \"America\", \"law\", \"held\", \"office\", \"You\", \"near\", \"find\", \"plans\", \"Iraq\", \"March\", \"times\", \"move\", \"countries\", \"national\", \"seen\", \"given\", \"service\", \"small\", \"bank\", \"again\", \"died\", \"really\", \"weeks\", \"services\", \"global\", \"known\", \"close\", \"European\", \"late\", \"Bush\", \"World\", \"saying\", \"spokesman\", \"keep\", \"statement\", \"11\", \"record\", \"earlier\", \"future\", \"oil\", \"official\", \"international\", \"point\", \"15\", \"University\", \"led\", \"tax\", \"job\", \"war\", \"After\", \"UK\", \"program\", \"'m\", \"Clinton\", \"12\", \"leader\", \"having\", \"federal\", \"house\", \"decision\", \"share\", \"nearly\", \"cut\", \"site\", \"taking\", \"something\", \"West\", \"Police\", \"election\", \"face\", \"others\", \"whose\", \"3\", \"almost\", \"working\", \"June\", \"So\", \"due\", \"His\", \"capital\", \"look\", \"return\", \"began\", \"City\", \"behind\", \"young\", \"meeting\", \"leaders\", \"able\", \"increase\", \"great\", \"asked\", \"director\", \"games\", \"April\", \"executive\", \"2006\", \"hours\", \"Reuters\", \"price\", \"call\", \"trying\", \"further\", \"5\", \"cost\", \"free\", \"current\", \"Britain\", \"What\", \"With\", \"State\", \"often\", \"series\", \"once\", \"banks\", \"fell\", \"believe\", \"rate\", \"following\", \"side\", \"crisis\", \"along\", \"yet\", \"open\", \"Afghanistan\", \"issue\", \"didn\"], \"hoffset\": 0, \"location\": \"mouse\", \"type\": \"tooltip\", \"id\": \"el23682140174890030096\"}], \"data\": {\"data01\": [[21.326837091636413, 8.898015357788914], [26.552312533562844, -17.07482212432841], [16.058276593535627, -27.75581496190842], [1.4293334399177662, 24.67769251226917], [1.0519408414003706, 24.22731322740855], [11.201903504205491, 22.92732611218994], [14.993220531072085, 8.955800222651229], [-0.6974387682362492, 24.79743999994471], [32.193402207756044, -9.589085489133963], [21.647470996164603, 8.304137443124835], [12.040667165261144, -12.872135367700325], [0.5494316814603887, 24.429753015138743], [1.5068329180503512, 22.222459729087795], [7.55702046922931, 24.780259866150228], [22.260478394809837, 8.076773356442112], [7.517766606467549, 24.839487261594144], [-0.4983783632215074, 23.4340431603124], [-18.516488489506724, 22.059217553886437], [2.177410681532453, 28.336270277732055], [18.50773781896586, 21.855110734945388], [21.017469049584022, -23.07950409011081], [1.2248738941350115, 24.736956209970238], [2.3554580189645375, 23.026775086541612], [8.392056658979245, 24.923431354648375], [21.7806100716035, -22.205641317844666], [8.21159008031872, 31.257048285790574], [8.219487802922728, 31.24706745151396], [22.521353548175615, 7.936873548328098], [7.542993144240617, 24.775861907022634], [18.47861275761377, -2.876954373563808], [9.7552403033258, 30.033356703671604], [12.972721252812022, 26.366087173774343], [20.12464948822749, -9.713436924074665], [11.532653564740178, 32.17139448144888], [-12.587030683036138, -22.909400143843964], [-16.780151846468247, -19.657602492871387], [8.16519330785403, 31.236427911370967], [22.335739971114094, 7.793304371954973], [7.503844831859722, 24.816103997971133], [-1.7762089303056718, -29.80965680574088], [-23.129349863576486, -17.649972192235712], [0.9331514003906126, 30.522196430798385], [10.600099830684224, 0.5917199170183722], [8.441223517181975, 24.953842557099126], [14.989999262937085, 18.875634830888103], [1.483037979391326, 29.757825593574182], [11.208327377144848, 22.93144376635637], [21.846073724563034, 8.083106432955326], [11.506572429308418, 32.28022630528121], [18.792860198684767, 23.08057213959244], [32.05012995867989, -9.583771006217821], [0.5625288254349438, 27.664875246333054], [-7.973046685411586, 11.487956207404718], [21.992402663538375, 10.894696350025797], [30.60895264003623, -7.259862599430695], [18.383176955326306, 23.68954700782877], [11.177951934389807, 29.874089328823032], [22.561469309766434, 8.012963733778383], [12.752499142701549, 26.530932419011638], [-16.885056157390707, 3.635897498092722], [-17.708583184151937, -14.002436389822185], [0.8321870319830789, 29.160287424127535], [-12.108410017279196, -14.433048667594797], [21.001134633076767, -23.048897616380934], [-20.258930826383907, -17.83807857770846], [30.564665743339255, 17.072732459548426], [-1.7714432947713974, -29.81318378852695], [4.041980969667683, 22.65592380612696], [11.534022727743553, 32.231310481285654], [11.963615739470585, 24.745172876889363], [32.53259367661615, 6.9590742019448175], [4.023280670020708, 4.878156764884759], [1.1038369688571896, 22.1349158521133], [32.17358316696962, -9.442971689119158], [21.74319846601278, -22.098031016852982], [30.315829922711636, 6.283648966496529], [24.8880914356143, 11.14001251371097], [-23.061983922473726, -19.854126281183614], [-0.6462977165300969, 25.968262743455735], [21.781611792468944, -22.216288267107576], [13.480496804040136, 17.478000001462213], [14.335895307739179, 10.497585067544692], [11.502374470066169, 32.29194117844512], [-13.339750741894543, -13.895642524972937], [-11.778976426905759, -27.74313735511682], [14.817147520307167, -29.70657639355915], [-8.627752299488828, 2.7289624551887326], [23.407875729242598, 15.00073902609439], [-19.575662998539656, -20.90657891489391], [0.8031444803209233, 29.369950534894606], [9.961401733241892, 15.97426153731928], [0.17112385493699767, 8.086009298234673], [14.82976080827882, 25.604831100694994], [12.19217470686455, 26.46471475617176], [-11.72354893171856, -21.96620979929386], [2.1212988220289897, -14.440418856171886], [11.193908723438295, 25.679604100901607], [25.43992208257377, 16.09587834485495], [0.7659251834996323, 27.965476132468456], [9.081689248771003, -6.131683078737462], [21.937744734443875, 2.4185609695726304], [16.138857515363725, 27.10592209875736], [0.41711656860909174, 30.045766302576038], [0.10210420434968541, 24.754811265743143], [10.520247134386896, 28.9531904046865], [30.59953375500458, 17.025271793468747], [9.26201190786061, 24.83911611494335], [3.510540759157428, 5.5594279424930475], [-2.4717046791003496, 32.121538323782126], [0.6565271895969371, 23.598963359715405], [0.9921055742176952, 29.44689816477283], [19.239664046377, -22.959084770494705], [-4.740116731603784, 25.243058861803636], [23.406719707310884, -3.735602072360806], [30.41821656502054, -12.74150534707233], [23.672251102848506, 14.90379103492237], [-12.116619207094436, -14.416321150826109], [2.4306011960240728, 19.809668725267056], [-1.2007017559574922, 10.496492381881598], [-8.009439781796893, 11.551138257457877], [0.9572826566694628, 28.174602051785598], [-13.384747082327848, 26.43920296369149], [13.787769233397324, -8.201991147259934], [0.8191178393366099, 30.142893388108476], [9.79885272850722, 15.866865545597328], [22.484171959774436, 7.465074591001351], [-4.700354706244607, 25.20697099176686], [-18.345665542034467, 22.163110046815316], [-0.5727195355324806, -11.95020897491011], [-10.359020275914059, 30.145526751069955], [30.545583826382522, -7.331402888656592], [-0.7236132902972039, 24.029544739113845], [-23.051566956643857, -19.863418689228467], [6.182502702368126, 20.86796776189528], [-0.9470136011178839, -15.274797290330422], [11.508722244061005, 32.29502908074644], [-17.572861715472644, -18.148299084837433], [10.065669425960792, 26.21230409274836], [0.5522243643871882, -7.86741129553939], [-1.1305090828198718, 28.792043929998375], [-18.26955903287577, 22.304102980351278], [10.524580073041802, 0.5626793382927849], [27.06234553037238, 15.444434397524699], [16.236855801674793, 29.857284731082196], [11.525166136739525, 32.218367371761765], [-0.6281769338214941, -11.95190316626785], [21.656454670892, 18.39376678382621], [10.463785546149763, 28.640098582638785], [-1.691631440037904, 24.532330615325296], [11.814083505208698, 30.06505548071847], [-24.62539613776038, -18.661776975149323], [-21.5871401483112, 7.254843004899713], [-0.874027455119267, 26.017525218931375], [4.042404763893815, 4.907417510390749], [-2.4453924740707227, 32.20633472548233], [-2.8166139202293046, 27.02877413604358], [30.240822418076608, 6.263478728104897], [-12.308047529920172, -4.531870130314372], [-22.977758148268368, -17.386950328594367], [-3.848678583144392, 21.71254059816739], [22.646314158615155, 7.381972185193957], [22.656027178969218, 7.294084861231865], [17.60370843693668, -11.541312458478387], [-12.205609700200245, -14.233036479571421], [11.984962426503532, 28.72390912680927], [0.999626070104138, -10.901555615950235], [32.48669985812717, 6.976411379646161], [-17.820212829285648, 24.13129350494978], [30.398175100750752, -12.722270466476356], [15.275908596394878, 26.081934525827872], [11.736705511792387, 2.256524042633843], [-25.03502245177232, -16.47069853747343], [23.45756680324648, 2.6301922171270884], [-0.8795512425706745, -13.961441159316356], [25.40692628806787, 16.143525582200365], [30.604470034448532, 16.9942301553679], [21.94351254479905, 2.4212980511201545], [-19.181226318396916, 2.0083180882290965], [21.729054741922297, 10.718075657091045], [18.72454480244623, 22.462587046370345], [-11.77466927955963, -27.745174855819208], [21.628525084310578, 3.6796873619709562], [32.643895893606484, 15.556426957420884], [-13.137488665117266, 29.782870189144717], [-1.4674909792058624, -25.715855358275086], [24.010834677580707, 12.885548105650201], [-7.917707022756259, 5.425114860432707], [4.581875183618064, -31.286963017016525], [4.57341096374525, -31.289718308780927], [4.577337244317479, -31.286243003880603], [4.575759207783279, -31.28592379337672], [20.356597971902886, 13.39245419950422], [-4.769541036067904, 6.088455432279367], [-6.1154872017967605, 6.205411777089007], [-7.030342398971921, 23.69098271465164], [-13.34146790721924, -13.868172983848849], [-12.132429850359506, -14.40217943619422], [-19.22094351639214, -16.938443395404253], [1.0511047544428156, -11.422549891528613], [7.237701988982829, 13.133499451542761], [-5.684641681252351, -20.01558157624934], [4.582683899830642, -31.28547096481513], [-10.693343024691243, 8.213761078897406], [12.058967658159085, -18.17022951116654], [-10.51755261150636, 8.211645585097921], [12.142907451179953, -12.906690820374534], [-4.616433523154405, -14.208209802268978], [-16.3349283866968, 19.688347725198994], [0.1496701904599421, -11.028497693470262], [0.1659144197429267, 8.076701718425513], [1.5571733866141009, 20.398335693372864], [-12.942920010944663, -10.942413607643642], [0.833336404511145, 29.374598377102433], [30.602650126689042, 16.975543552547013], [15.010972580301274, 25.940577145963168], [-6.837441477708523, -11.963887515865322], [-18.723127000394193, 15.435942866030734], [-31.153815866228513, -9.384979737907146], [-8.65719027829307, -5.457726863275036], [12.187053898360787, 13.61123679488898], [-18.510041684208865, 22.596276086582964], [-13.377630745963913, -13.814879779114102], [-1.5108610944300314, -24.7099459708784], [10.686158616758716, -24.362520966525917], [13.367418913555143, 4.952054119870182], [2.0614040648262755, 28.432777575293812], [-13.294860235422814, 18.098569896287334], [-11.103511840771457, -13.146050625675423], [-28.677594142057544, 11.776829762942285], [-2.643616537169468, 15.641860172277564], [-19.533511321743124, -20.984999411554977], [-15.252602171652764, 24.3956323445626], [0.16630594927254708, -12.789212874354838], [12.078472301998383, 20.5660255510213], [3.7025742848491, 5.481828851843986], [33.38087926041163, 15.088992261578314], [12.837625841709535, 4.993675039443209], [-21.414559873412625, 15.296372630933979], [-18.261499235756716, 24.60032488216632], [11.509075951108299, 32.28112233418039], [24.162869828547688, 14.519631046444198], [21.726429347451308, -22.115871161261076], [-20.356576501258136, 10.364651316132985], [14.921936021238926, -29.287298544566177], [-8.55596455500222, 5.119348562930224], [18.488333244479218, 23.577315674769505], [5.385708629997409, 16.7394469123253], [-17.467146168730324, 22.32588448282366], [0.1523024011309557, 8.072262488195326], [14.848024408832167, -15.486608303267808], [7.674813489417874, 24.752859445064885], [-25.22575565378973, 19.124859482915735], [-11.381801287356247, -2.762907794472126], [15.512494374518887, 23.73827741277325], [4.314194300176278, -15.82561000282019], [-21.621991813326343, 15.182766295883688], [-5.7291306160059206, 10.755602919256162], [-2.8184463049425736, 27.031889184381864], [-25.225342337913386, 19.126107225016142], [10.535907908061233, 17.83994159292266], [4.593496059510578, -31.284916300881843], [7.655233151488982, -5.60630833533646], [-16.54764214757169, 4.8694952474737425], [-15.033259712792512, -5.81103736428975], [7.434465740517177, -29.61122179884137], [5.431263148212133, 4.1785935682489335], [-0.5221428903225238, -10.478278996809333], [17.859844664923536, 12.124617578829417], [16.982680195293668, 18.98740754399003], [-4.9605735768512975, -8.922501029089783], [-5.35179819136186, -9.477298157197454], [15.072620584276706, 15.335935353272799], [14.303111640259349, 6.038667101712633], [0.6449589647853732, 24.38608057223447], [21.52505140080801, 5.406709056557302], [16.20602542984779, 29.882661228484636], [-19.556532705440652, -20.946327980363332], [10.563707205358117, 28.91096772899889], [3.1801712683865953, -15.114537205108856], [-19.320221690282334, 21.617793747031705], [1.4818570256107502, 25.239882052813662], [32.46826476034903, 6.987781244424658], [0.9569873619254045, 28.345275115920273], [20.909238061744823, 9.825342552620997], [7.681672212387564, -29.596572718030245], [-4.12943192366711, -9.715091955651335], [1.142565508369446, -16.851883726660787], [21.625397524654122, 3.6344259125304212], [13.6315491292344, 5.990461800400485], [14.948715874670834, 18.83720353239687], [4.594607275740241, -31.28258242251949], [-23.864475708015565, -12.222127735360349], [-28.824383127538038, -0.4910903251436104], [-0.3150341299940598, -18.330467078074527], [0.04519711579052857, 23.54405538372855], [22.349808617359077, -6.067220673589118], [4.321013726283417, -31.316006580084796], [-8.322377155868649, 11.93305939750173], [12.758092441027355, 26.5653905493652], [-19.196117228834975, -16.905312251304622], [-13.151883321062884, -9.248841600835643], [31.90877120451505, 15.74736877777276], [30.63534081775581, 16.95736845341867], [10.68440286399974, 16.221590709428895], [31.959494377171385, 15.709545590960106], [11.335574691668606, -18.19333876063648], [8.019293844676866, 27.727354296777936], [-9.80211046272696, -5.117071555290482], [-15.07541442772159, 16.479272488362067], [-10.361135406958073, 30.1435059978468], [1.6120560376095823, -8.735639427147648], [-4.006583295683287, 14.158979317649177], [18.549658165018084, 22.001282220632117], [-19.183443650095054, -16.846557948066906], [12.963514477085296, 13.33406385476203], [-0.3735375779807193, -13.252479029080844], [23.589375348308668, 14.102441846902321], [-6.593293800993413, -7.171388551923981], [-27.05531402742184, -13.569857990353565], [-11.918898613205723, 15.272868017468577], [-6.713301667137102, -25.79089003903268], [17.42793485653013, -5.409976425823936], [27.99677534077158, -11.687440537364402], [-22.815482744349147, -0.0791948774525402], [-9.105238573347245, 8.09334831566449], [13.313038287551672, 18.30381803213583], [12.771658522868393, 15.305256183781566], [20.8915372642917, 9.646588912280203], [-14.489472173138743, -9.581186138478285], [20.49021092767404, 2.9870518124622927], [-9.888611620302495, 0.1609277984645302], [-6.663871746849431, 26.846670574764392], [12.559088758879335, -20.889584152158058], [8.46406458781593, 22.006755154198736], [1.4836203914852215, 22.17242072452765], [-5.233718598749972, -13.161441282288166], [4.0707029236034575, -1.5199419229484403], [-5.1072633781168015, 15.544812904851256], [0.2847063213919344, -13.035775128715045], [33.351236079684526, 15.081254399165726], [14.41825169675902, 14.27695884282592], [-30.942134114781606, -3.3653965362298437], [-15.079555557897942, 11.817911822534143], [5.701578412909404, 26.687174710212005], [-8.557331435693387, -3.759427756543067], [7.153939411308628, -29.547282164300633], [-9.857917404789465, 10.735164729857178], [-5.659996214752237, -0.5410795677001634], [27.640492046737112, -0.15264712945825806], [-11.129659609463316, -4.741662900546093], [-4.690031562197201, 25.18943014862488], [-2.437686217481747, 32.20962432027622], [-14.261818251687165, 20.769876759462676], [2.530671879433484, 21.767495230531352], [-10.660709146715034, 8.305342136354872], [-1.2302035257863295, -11.503540152495816], [21.948450126920097, 10.859829172008116], [9.035866914275017, -12.897817223138366], [0.8587089905312971, 29.102313095682206], [-23.930561587402362, -8.077590399954596], [22.382733293850066, -5.930221020714374], [11.5442198255793, 32.192066579707834], [14.834875720895582, -19.262980380441512], [1.0925609527195594, -12.434733650485926], [8.402753794016041, 31.105243356775908], [-9.341629582613834, 27.166100071093933], [1.6411996540479432, -4.133700356837209], [-25.25813609399135, -8.257082463487981], [-5.380667239574153, 30.089586659245995], [12.428312482615437, 13.196855014814844], [17.15727182857505, -4.085058579896695], [9.669530433619443, 15.842061634578476], [1.2136399999547172, 30.068165198064225], [10.351256384741635, -23.711802054382538], [-4.445906259002562, -9.238632230002004], [-6.557665170916199, 14.860985476161249], [-1.3010461233355342, -10.022840391409026], [-17.806401393230527, -13.904927523518865], [2.1058003898066926, 20.89198384729176], [-11.840689581599916, 21.157815211942662], [-23.89992431669437, 11.311182534917014], [12.308088771132924, -24.0038778235608], [7.9101192287327144, -32.89016639575473], [-16.146666554638614, 5.890752108322501], [-11.205995297015187, 6.940928210785562], [-24.516235158162754, -11.060242715134022], [19.204785767653018, 4.997458369071061], [-8.831767484216495, 23.123710734750958], [-14.52042703942374, 15.155944341300621], [-1.0656557795983421, -8.768908559967196], [7.900845110669491, 8.177206130376842], [-0.8048073271475209, -15.52347746466773], [11.773827747922379, 29.426960531915835], [-15.426787458380842, 10.404134426854554], [11.674843900603813, 26.80548387634652], [-13.324279187136849, -13.803593393568653], [-23.02125242075563, -5.94829534960281], [20.473378214372044, 5.5565644240068135], [-8.042823219783525, 23.911308342460686], [4.687607336210782, 14.6960271525238], [20.103549355782956, 5.098367959387001], [16.986436125562342, 18.990726721033553], [19.196716961894882, -22.953621755773575], [11.2276466563455, -7.6027367014977685], [-17.912188436763174, 20.868817509352493], [-4.1830184157775925, -25.245230475306343], [-3.700731179447561, 11.24084363591506], [-4.985714336376078, -14.71334863845859], [32.71188361617097, 15.558124335316712], [9.97828156479104, 17.012593008606075], [15.527456339133419, 23.685026331824197], [2.6051235827493535, 3.9449830892536704], [4.53122275243503, -0.44850261641564587], [-3.697367165100449, -19.05105123482416], [20.104853100160376, 4.878872335379389], [-9.166858459440414, 6.0291376822862315], [32.06396132399813, 15.704136719848197], [8.099209375048655, -12.555824521255227], [-11.752002300247419, 15.339618965798298], [-5.209430907579382, -11.59510835957572], [-3.8472731882518625, -5.639248409753837], [-27.946116135433414, 1.1503755595511902], [0.639901115081329, 27.774112137540307], [3.79385356875315, -16.0166627245544], [-4.043970488277403, -9.903830293970538], [7.719861215790544, 24.737594961043996], [19.222852240206386, -22.88260493179892], [32.13040731661497, 15.76808597766987], [-3.0114387949883725, -23.23831895764517], [8.209918298309228, 31.19218080449906], [18.599303025783602, 3.009524152494572], [0.5085646400158876, -8.301320901468271], [-23.13505059073879, 8.059220221339823], [-2.9324540629786644, 6.282786214798083], [18.602594656519393, 23.50930408923887], [0.0150330031912707, 17.551452440327065], [-0.238905091991667, -7.929209132377328], [-2.807778992487783, 27.013024203140326], [-13.721281154153482, -20.974495266407693], [18.71913017533701, -1.4514449194950063], [-24.928961366335933, -18.981729790420527], [-5.370294485548953, -11.921702292761893], [-8.100803561114676, 3.645026262173642], [-23.3911330786455, -15.76902579420657], [22.3476961693004, 8.21419960200082], [33.334070374259134, 15.09402897631465], [18.54518151577397, 23.612561116655595], [-0.7811139898594204, 9.177365546845254], [7.908040675611289, -32.88464544081334], [3.952456107294635, 4.4939342267749804], [-20.000863217088526, 11.80724087697747], [22.389502018566052, 8.014162759357506], [-3.7972034016092366, -7.181298777400349], [-26.459477768546606, 14.934207736415651], [-10.521359882437267, 6.166374010257417], [-15.359082433317996, 12.252568942262325], [10.125630016430227, -13.944095406553936], [-0.5271084694353002, 22.296814790150805], [19.112294690694718, 9.671743448062426], [-29.36614331340189, -1.6132565609659966], [-25.523656568862688, -15.640536349598605], [-22.76461408761037, 12.003484268671544], [-14.253926567549012, 5.475403896638776], [7.477329787672417, 12.611574391126673], [-10.860571296511795, 22.191100658063302], [-3.4334517407835548, -23.076526426514786], [-18.24726066034178, -6.274105831357984], [7.909534144787051, -32.88678633945206], [-2.94968169382515, -18.64141852339837], [7.017166190394279, -29.426154043541775], [-13.432042741023416, -13.666295644214616], [13.148880935264968, -12.89208703764394], [-9.057297864741686, -8.735969778859301], [-33.15755308588702, 0.8626788351759902], [-22.726396993540487, 11.225478110232919], [12.860422209048414, 14.37247001498675], [33.28079023444879, 15.118732084013214], [-25.55334530252564, -7.010091877269528], [5.015723809859515, 8.885270264025854], [14.484029768433292, 10.786072577401042], [10.314697185081663, -23.9539350026607], [-11.70956561484766, -21.95183689489829], [-0.3113854775634885, 23.299163815403052], [14.256222072502494, -15.442205332287026], [10.894981195079424, 28.66838736679244], [-8.594130251393018, -11.24639613726733], [2.7915920223041466, 28.944471834469624], [-24.475926813414823, -12.238868664847915], [-6.7067535876919075, 30.801243562814715], [-18.26695415828276, 22.31189509868388], [-9.058282458578912, -8.901397971113056], [-3.9983000679202725, 22.852119248468355], [1.8522099200067985, -19.599624510666878], [-3.7709837091219, -6.944183618528032], [3.734297959569019, 21.95171418898427], [11.07182733707543, 27.840617394125882], [0.23312446377015592, 14.48636763593596], [12.264573177077528, -23.913006433720575], [-5.626403900560809, -8.207456668608625], [-28.562324817978137, 11.698679294857584]]}, \"id\": \"el23682140175246715216\"});\n",
+        "   }(mpld3);\n",
+        "}else if(typeof define === \"function\" && define.amd){\n",
+        "   // require.js is available: use it to load d3/mpld3\n",
+        "   require.config({paths: {d3: \"https://mpld3.github.io/js/d3.v3.min\"}});\n",
+        "   require([\"d3\"], function(d3){\n",
+        "      window.d3 = d3;\n",
+        "      mpld3_load_lib(\"https://mpld3.github.io/js/mpld3.v0.2.js\", function(){\n",
+        "         \n",
+        "         mpld3.draw_figure(\"fig_el236821401752467152165224441100\", {\"axes\": [{\"xlim\": [-40.0, 40.0], \"yscale\": \"linear\", \"axesbg\": \"#EEEEEE\", \"texts\": [], \"zoomable\": true, \"images\": [], \"xdomain\": [-40.0, 40.0], \"ylim\": [-40.0, 40.0], \"paths\": [], \"sharey\": [], \"sharex\": [], \"axesbgalpha\": null, \"axes\": [{\"scale\": \"linear\", \"tickformat\": null, \"grid\": {\"color\": \"#FFFFFF\", \"alpha\": 1.0, \"dasharray\": \"10,0\", \"gridOn\": true}, \"fontsize\": 10.0, \"position\": \"bottom\", \"nticks\": 9, \"tickvalues\": null}, {\"scale\": \"linear\", \"tickformat\": null, \"grid\": {\"color\": \"#FFFFFF\", \"alpha\": 1.0, \"dasharray\": \"10,0\", \"gridOn\": true}, \"fontsize\": 10.0, \"position\": \"left\", \"nticks\": 9, \"tickvalues\": null}], \"lines\": [], \"markers\": [], \"id\": \"el23682140175056692368\", \"ydomain\": [-40.0, 40.0], \"collections\": [{\"paths\": [[[[0.0, -0.5], [0.13260155, -0.5], [0.25978993539242673, -0.44731684579412084], [0.3535533905932738, -0.3535533905932738], [0.44731684579412084, -0.25978993539242673], [0.5, -0.13260155], [0.5, 0.0], [0.5, 0.13260155], [0.44731684579412084, 0.25978993539242673], [0.3535533905932738, 0.3535533905932738], [0.25978993539242673, 0.44731684579412084], [0.13260155, 0.5], [0.0, 0.5], [-0.13260155, 0.5], [-0.25978993539242673, 0.44731684579412084], [-0.3535533905932738, 0.3535533905932738], [-0.44731684579412084, 0.25978993539242673], [-0.5, 0.13260155], [-0.5, 0.0], [-0.5, -0.13260155], [-0.44731684579412084, -0.25978993539242673], [-0.3535533905932738, -0.3535533905932738], [-0.25978993539242673, -0.44731684579412084], [-0.13260155, -0.5], [0.0, -0.5]], [\"M\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"Z\"]]], \"edgecolors\": [\"#000000\"], \"edgewidths\": [1.0], \"offsets\": \"data01\", \"yindex\": 1, \"id\": \"el23682140174890030096\", \"pathtransforms\": [[11.11111111111111, 0.0, 0.0, 11.11111111111111, 0.0, 0.0]], \"pathcoordinates\": \"display\", \"offsetcoordinates\": \"data\", \"zorder\": 1, \"xindex\": 0, \"alphas\": [0.1], \"facecolors\": [\"#3EEEEE\"]}], \"xscale\": \"linear\", \"bbox\": [0.125, 0.125, 0.77500000000000002, 0.77500000000000002]}], \"height\": 640.0, \"width\": 640.0, \"plugins\": [{\"type\": \"reset\"}, {\"enabled\": false, \"button\": true, \"type\": \"zoom\"}, {\"enabled\": false, \"button\": true, \"type\": \"boxzoom\"}, {\"voffset\": 10, \"labels\": [\"the\", \",\", \".\", \"to\", \"of\", \"and\", \"a\", \"in\", \"\\\"\", \"'s\", \"that\", \"for\", \"on\", \"is\", \"The\", \"was\", \"with\", \"said\", \"as\", \"at\", \"it\", \"by\", \"from\", \"be\", \"he\", \"have\", \"has\", \"his\", \"are\", \"an\", \")\", \"not\", \"(\", \"will\", \"who\", \"I\", \"had\", \"their\", \"were\", \"--\", \"they\", \"but\", \"this\", \"been\", \"more\", \"which\", \"or\", \"its\", \"would\", \"about\", \":\", \"after\", \"up\", \"one\", \"$\", \"than\", \"also\", \"her\", \"'t\", \"out\", \"you\", \"when\", \"year\", \"It\", \"people\", \"two\", \"-\", \"over\", \"can\", \"all\", \"first\", \"But\", \"into\", \"'\", \"He\", \"last\", \"A\", \"we\", \"In\", \"she\", \"other\", \"new\", \"could\", \"years\", \"there\", \"?\", \"time\", \"some\", \"them\", \"if\", \"no\", \"percent\", \"so\", \"only\", \"what\", \"government\", \"just\", \"million\", \"before\", \"him\", \"U.S.\", \"most\", \"because\", \"like\", \"now\", \"three\", \"being\", \";\", \"do\", \"against\", \"where\", \"Obama\", \"made\", \"New\", \"Mr\", \"many\", \"week\", \"off\", \"back\", \"down\", \"since\", \"told\", \"/\", \"while\", \"any\", \"our\", \"make\", \"says\", \"world\", \"get\", \"\\u00a3\", \"through\", \"We\", \"such\", \"company\", \"may\", \"those\", \"even\", \"home\", \"how\", \"say\", \"This\", \"per\", \"much\", \"should\", \"country\", \"between\", \"still\", \"including\", \"then\", \"police\", \"way\", \"during\", \"And\", \"did\", \"take\", \"next\", \"work\", \"They\", \"under\", \"my\", \"your\", \"United\", \"day\", \"well\", \"state\", \"second\", \"found\", \"Mr.\", \"very\", \"public\", \"officials\", \"former\", \"group\", \"billion\", \"four\", \"US\", \"part\", \"another\", \"around\", \"There\", \"American\", \"10\", \"help\", \"President\", \"both\", \"end\", \"Monday\", \"Tuesday\", \"Friday\", \"Wednesday\", \"these\", \"left\", \"set\", \"see\", \"months\", \"month\", \"children\", \"market\", \"good\", \"man\", \"Thursday\", \"go\", \"York\", \"going\", \"That\", \"report\", \"reported\", \"team\", \"%\", \"own\", \"money\", \"If\", \"five\", \"too\", \"game\", \"used\", \"number\", \"business\", \"same\", \"think\", \"days\", \"president\", \"China\", \"financial\", \"As\", \"called\", \"season\", \"don\", \"won\", \"me\", \"expected\", \"family\", \"long\", \"...\", \"1\", \"health\", \"need\", \"show\", \"might\", \"few\", \"She\", \"according\", \"!\", \"use\", \"least\", \"right\", \"know\", \"cent\", \"AP\", \"'re\", \"come\", \"life\", \"later\", \"States\", \"want\", \"put\", \"took\", \"came\", \"high\", \"Sunday\", \"night\", \"support\", \"points\", \"2008\", \"ago\", \"city\", \"top\", \"early\", \"case\", \"place\", \"best\", \"political\", \"For\", \"past\", \"far\", \"us\", \"already\", \"military\", \"whether\", \"without\", \"third\", \"until\", \"each\", \"2009\", \"system\", \"House\", \"British\", \"economic\", \"less\", \"Saturday\", \"companies\", \"deal\", \"court\", \"among\", \"South\", \"today\", \"away\", \"never\", \"women\", \"win\", \"30\", \"six\", \"little\", \"20\", \"London\", \"here\", \"security\", \"added\", \"got\", \"school\", \"killed\", \"At\", \"men\", \"recent\", \"campaign\", \"several\", \"news\", \"members\", \"lead\", \"chief\", \"&\", \"John\", \"information\", \"run\", \"better\", \"big\", \"every\", \"economy\", \"local\", \"change\", \"pay\", \"Washington\", \"likely\", \"On\", \"quarter\", \"power\", \"hit\", \"party\", \"2\", \"major\", \"plan\", \"start\", \"become\", \"care\", \"2007\", \"taken\", \"play\", \"half\", \"death\", \"making\", \"does\", \"announced\", \"across\", \"went\", \"area\", \"One\", \"head\", \"When\", \"prices\", \"North\", \"must\", \"England\", \"industry\", \"'ve\", \"give\", \"car\", \"sales\", \"lost\", \"final\", \"National\", \"enough\", \"though\", \"America\", \"law\", \"held\", \"office\", \"You\", \"near\", \"find\", \"plans\", \"Iraq\", \"March\", \"times\", \"move\", \"countries\", \"national\", \"seen\", \"given\", \"service\", \"small\", \"bank\", \"again\", \"died\", \"really\", \"weeks\", \"services\", \"global\", \"known\", \"close\", \"European\", \"late\", \"Bush\", \"World\", \"saying\", \"spokesman\", \"keep\", \"statement\", \"11\", \"record\", \"earlier\", \"future\", \"oil\", \"official\", \"international\", \"point\", \"15\", \"University\", \"led\", \"tax\", \"job\", \"war\", \"After\", \"UK\", \"program\", \"'m\", \"Clinton\", \"12\", \"leader\", \"having\", \"federal\", \"house\", \"decision\", \"share\", \"nearly\", \"cut\", \"site\", \"taking\", \"something\", \"West\", \"Police\", \"election\", \"face\", \"others\", \"whose\", \"3\", \"almost\", \"working\", \"June\", \"So\", \"due\", \"His\", \"capital\", \"look\", \"return\", \"began\", \"City\", \"behind\", \"young\", \"meeting\", \"leaders\", \"able\", \"increase\", \"great\", \"asked\", \"director\", \"games\", \"April\", \"executive\", \"2006\", \"hours\", \"Reuters\", \"price\", \"call\", \"trying\", \"further\", \"5\", \"cost\", \"free\", \"current\", \"Britain\", \"What\", \"With\", \"State\", \"often\", \"series\", \"once\", \"banks\", \"fell\", \"believe\", \"rate\", \"following\", \"side\", \"crisis\", \"along\", \"yet\", \"open\", \"Afghanistan\", \"issue\", \"didn\"], \"hoffset\": 0, \"location\": \"mouse\", \"type\": \"tooltip\", \"id\": \"el23682140174890030096\"}], \"data\": {\"data01\": [[21.326837091636413, 8.898015357788914], [26.552312533562844, -17.07482212432841], [16.058276593535627, -27.75581496190842], [1.4293334399177662, 24.67769251226917], [1.0519408414003706, 24.22731322740855], [11.201903504205491, 22.92732611218994], [14.993220531072085, 8.955800222651229], [-0.6974387682362492, 24.79743999994471], [32.193402207756044, -9.589085489133963], [21.647470996164603, 8.304137443124835], [12.040667165261144, -12.872135367700325], [0.5494316814603887, 24.429753015138743], [1.5068329180503512, 22.222459729087795], [7.55702046922931, 24.780259866150228], [22.260478394809837, 8.076773356442112], [7.517766606467549, 24.839487261594144], [-0.4983783632215074, 23.4340431603124], [-18.516488489506724, 22.059217553886437], [2.177410681532453, 28.336270277732055], [18.50773781896586, 21.855110734945388], [21.017469049584022, -23.07950409011081], [1.2248738941350115, 24.736956209970238], [2.3554580189645375, 23.026775086541612], [8.392056658979245, 24.923431354648375], [21.7806100716035, -22.205641317844666], [8.21159008031872, 31.257048285790574], [8.219487802922728, 31.24706745151396], [22.521353548175615, 7.936873548328098], [7.542993144240617, 24.775861907022634], [18.47861275761377, -2.876954373563808], [9.7552403033258, 30.033356703671604], [12.972721252812022, 26.366087173774343], [20.12464948822749, -9.713436924074665], [11.532653564740178, 32.17139448144888], [-12.587030683036138, -22.909400143843964], [-16.780151846468247, -19.657602492871387], [8.16519330785403, 31.236427911370967], [22.335739971114094, 7.793304371954973], [7.503844831859722, 24.816103997971133], [-1.7762089303056718, -29.80965680574088], [-23.129349863576486, -17.649972192235712], [0.9331514003906126, 30.522196430798385], [10.600099830684224, 0.5917199170183722], [8.441223517181975, 24.953842557099126], [14.989999262937085, 18.875634830888103], [1.483037979391326, 29.757825593574182], [11.208327377144848, 22.93144376635637], [21.846073724563034, 8.083106432955326], [11.506572429308418, 32.28022630528121], [18.792860198684767, 23.08057213959244], [32.05012995867989, -9.583771006217821], [0.5625288254349438, 27.664875246333054], [-7.973046685411586, 11.487956207404718], [21.992402663538375, 10.894696350025797], [30.60895264003623, -7.259862599430695], [18.383176955326306, 23.68954700782877], [11.177951934389807, 29.874089328823032], [22.561469309766434, 8.012963733778383], [12.752499142701549, 26.530932419011638], [-16.885056157390707, 3.635897498092722], [-17.708583184151937, -14.002436389822185], [0.8321870319830789, 29.160287424127535], [-12.108410017279196, -14.433048667594797], [21.001134633076767, -23.048897616380934], [-20.258930826383907, -17.83807857770846], [30.564665743339255, 17.072732459548426], [-1.7714432947713974, -29.81318378852695], [4.041980969667683, 22.65592380612696], [11.534022727743553, 32.231310481285654], [11.963615739470585, 24.745172876889363], [32.53259367661615, 6.9590742019448175], [4.023280670020708, 4.878156764884759], [1.1038369688571896, 22.1349158521133], [32.17358316696962, -9.442971689119158], [21.74319846601278, -22.098031016852982], [30.315829922711636, 6.283648966496529], [24.8880914356143, 11.14001251371097], [-23.061983922473726, -19.854126281183614], [-0.6462977165300969, 25.968262743455735], [21.781611792468944, -22.216288267107576], [13.480496804040136, 17.478000001462213], [14.335895307739179, 10.497585067544692], [11.502374470066169, 32.29194117844512], [-13.339750741894543, -13.895642524972937], [-11.778976426905759, -27.74313735511682], [14.817147520307167, -29.70657639355915], [-8.627752299488828, 2.7289624551887326], [23.407875729242598, 15.00073902609439], [-19.575662998539656, -20.90657891489391], [0.8031444803209233, 29.369950534894606], [9.961401733241892, 15.97426153731928], [0.17112385493699767, 8.086009298234673], [14.82976080827882, 25.604831100694994], [12.19217470686455, 26.46471475617176], [-11.72354893171856, -21.96620979929386], [2.1212988220289897, -14.440418856171886], [11.193908723438295, 25.679604100901607], [25.43992208257377, 16.09587834485495], [0.7659251834996323, 27.965476132468456], [9.081689248771003, -6.131683078737462], [21.937744734443875, 2.4185609695726304], [16.138857515363725, 27.10592209875736], [0.41711656860909174, 30.045766302576038], [0.10210420434968541, 24.754811265743143], [10.520247134386896, 28.9531904046865], [30.59953375500458, 17.025271793468747], [9.26201190786061, 24.83911611494335], [3.510540759157428, 5.5594279424930475], [-2.4717046791003496, 32.121538323782126], [0.6565271895969371, 23.598963359715405], [0.9921055742176952, 29.44689816477283], [19.239664046377, -22.959084770494705], [-4.740116731603784, 25.243058861803636], [23.406719707310884, -3.735602072360806], [30.41821656502054, -12.74150534707233], [23.672251102848506, 14.90379103492237], [-12.116619207094436, -14.416321150826109], [2.4306011960240728, 19.809668725267056], [-1.2007017559574922, 10.496492381881598], [-8.009439781796893, 11.551138257457877], [0.9572826566694628, 28.174602051785598], [-13.384747082327848, 26.43920296369149], [13.787769233397324, -8.201991147259934], [0.8191178393366099, 30.142893388108476], [9.79885272850722, 15.866865545597328], [22.484171959774436, 7.465074591001351], [-4.700354706244607, 25.20697099176686], [-18.345665542034467, 22.163110046815316], [-0.5727195355324806, -11.95020897491011], [-10.359020275914059, 30.145526751069955], [30.545583826382522, -7.331402888656592], [-0.7236132902972039, 24.029544739113845], [-23.051566956643857, -19.863418689228467], [6.182502702368126, 20.86796776189528], [-0.9470136011178839, -15.274797290330422], [11.508722244061005, 32.29502908074644], [-17.572861715472644, -18.148299084837433], [10.065669425960792, 26.21230409274836], [0.5522243643871882, -7.86741129553939], [-1.1305090828198718, 28.792043929998375], [-18.26955903287577, 22.304102980351278], [10.524580073041802, 0.5626793382927849], [27.06234553037238, 15.444434397524699], [16.236855801674793, 29.857284731082196], [11.525166136739525, 32.218367371761765], [-0.6281769338214941, -11.95190316626785], [21.656454670892, 18.39376678382621], [10.463785546149763, 28.640098582638785], [-1.691631440037904, 24.532330615325296], [11.814083505208698, 30.06505548071847], [-24.62539613776038, -18.661776975149323], [-21.5871401483112, 7.254843004899713], [-0.874027455119267, 26.017525218931375], [4.042404763893815, 4.907417510390749], [-2.4453924740707227, 32.20633472548233], [-2.8166139202293046, 27.02877413604358], [30.240822418076608, 6.263478728104897], [-12.308047529920172, -4.531870130314372], [-22.977758148268368, -17.386950328594367], [-3.848678583144392, 21.71254059816739], [22.646314158615155, 7.381972185193957], [22.656027178969218, 7.294084861231865], [17.60370843693668, -11.541312458478387], [-12.205609700200245, -14.233036479571421], [11.984962426503532, 28.72390912680927], [0.999626070104138, -10.901555615950235], [32.48669985812717, 6.976411379646161], [-17.820212829285648, 24.13129350494978], [30.398175100750752, -12.722270466476356], [15.275908596394878, 26.081934525827872], [11.736705511792387, 2.256524042633843], [-25.03502245177232, -16.47069853747343], [23.45756680324648, 2.6301922171270884], [-0.8795512425706745, -13.961441159316356], [25.40692628806787, 16.143525582200365], [30.604470034448532, 16.9942301553679], [21.94351254479905, 2.4212980511201545], [-19.181226318396916, 2.0083180882290965], [21.729054741922297, 10.718075657091045], [18.72454480244623, 22.462587046370345], [-11.77466927955963, -27.745174855819208], [21.628525084310578, 3.6796873619709562], [32.643895893606484, 15.556426957420884], [-13.137488665117266, 29.782870189144717], [-1.4674909792058624, -25.715855358275086], [24.010834677580707, 12.885548105650201], [-7.917707022756259, 5.425114860432707], [4.581875183618064, -31.286963017016525], [4.57341096374525, -31.289718308780927], [4.577337244317479, -31.286243003880603], [4.575759207783279, -31.28592379337672], [20.356597971902886, 13.39245419950422], [-4.769541036067904, 6.088455432279367], [-6.1154872017967605, 6.205411777089007], [-7.030342398971921, 23.69098271465164], [-13.34146790721924, -13.868172983848849], [-12.132429850359506, -14.40217943619422], [-19.22094351639214, -16.938443395404253], [1.0511047544428156, -11.422549891528613], [7.237701988982829, 13.133499451542761], [-5.684641681252351, -20.01558157624934], [4.582683899830642, -31.28547096481513], [-10.693343024691243, 8.213761078897406], [12.058967658159085, -18.17022951116654], [-10.51755261150636, 8.211645585097921], [12.142907451179953, -12.906690820374534], [-4.616433523154405, -14.208209802268978], [-16.3349283866968, 19.688347725198994], [0.1496701904599421, -11.028497693470262], [0.1659144197429267, 8.076701718425513], [1.5571733866141009, 20.398335693372864], [-12.942920010944663, -10.942413607643642], [0.833336404511145, 29.374598377102433], [30.602650126689042, 16.975543552547013], [15.010972580301274, 25.940577145963168], [-6.837441477708523, -11.963887515865322], [-18.723127000394193, 15.435942866030734], [-31.153815866228513, -9.384979737907146], [-8.65719027829307, -5.457726863275036], [12.187053898360787, 13.61123679488898], [-18.510041684208865, 22.596276086582964], [-13.377630745963913, -13.814879779114102], [-1.5108610944300314, -24.7099459708784], [10.686158616758716, -24.362520966525917], [13.367418913555143, 4.952054119870182], [2.0614040648262755, 28.432777575293812], [-13.294860235422814, 18.098569896287334], [-11.103511840771457, -13.146050625675423], [-28.677594142057544, 11.776829762942285], [-2.643616537169468, 15.641860172277564], [-19.533511321743124, -20.984999411554977], [-15.252602171652764, 24.3956323445626], [0.16630594927254708, -12.789212874354838], [12.078472301998383, 20.5660255510213], [3.7025742848491, 5.481828851843986], [33.38087926041163, 15.088992261578314], [12.837625841709535, 4.993675039443209], [-21.414559873412625, 15.296372630933979], [-18.261499235756716, 24.60032488216632], [11.509075951108299, 32.28112233418039], [24.162869828547688, 14.519631046444198], [21.726429347451308, -22.115871161261076], [-20.356576501258136, 10.364651316132985], [14.921936021238926, -29.287298544566177], [-8.55596455500222, 5.119348562930224], [18.488333244479218, 23.577315674769505], [5.385708629997409, 16.7394469123253], [-17.467146168730324, 22.32588448282366], [0.1523024011309557, 8.072262488195326], [14.848024408832167, -15.486608303267808], [7.674813489417874, 24.752859445064885], [-25.22575565378973, 19.124859482915735], [-11.381801287356247, -2.762907794472126], [15.512494374518887, 23.73827741277325], [4.314194300176278, -15.82561000282019], [-21.621991813326343, 15.182766295883688], [-5.7291306160059206, 10.755602919256162], [-2.8184463049425736, 27.031889184381864], [-25.225342337913386, 19.126107225016142], [10.535907908061233, 17.83994159292266], [4.593496059510578, -31.284916300881843], [7.655233151488982, -5.60630833533646], [-16.54764214757169, 4.8694952474737425], [-15.033259712792512, -5.81103736428975], [7.434465740517177, -29.61122179884137], [5.431263148212133, 4.1785935682489335], [-0.5221428903225238, -10.478278996809333], [17.859844664923536, 12.124617578829417], [16.982680195293668, 18.98740754399003], [-4.9605735768512975, -8.922501029089783], [-5.35179819136186, -9.477298157197454], [15.072620584276706, 15.335935353272799], [14.303111640259349, 6.038667101712633], [0.6449589647853732, 24.38608057223447], [21.52505140080801, 5.406709056557302], [16.20602542984779, 29.882661228484636], [-19.556532705440652, -20.946327980363332], [10.563707205358117, 28.91096772899889], [3.1801712683865953, -15.114537205108856], [-19.320221690282334, 21.617793747031705], [1.4818570256107502, 25.239882052813662], [32.46826476034903, 6.987781244424658], [0.9569873619254045, 28.345275115920273], [20.909238061744823, 9.825342552620997], [7.681672212387564, -29.596572718030245], [-4.12943192366711, -9.715091955651335], [1.142565508369446, -16.851883726660787], [21.625397524654122, 3.6344259125304212], [13.6315491292344, 5.990461800400485], [14.948715874670834, 18.83720353239687], [4.594607275740241, -31.28258242251949], [-23.864475708015565, -12.222127735360349], [-28.824383127538038, -0.4910903251436104], [-0.3150341299940598, -18.330467078074527], [0.04519711579052857, 23.54405538372855], [22.349808617359077, -6.067220673589118], [4.321013726283417, -31.316006580084796], [-8.322377155868649, 11.93305939750173], [12.758092441027355, 26.5653905493652], [-19.196117228834975, -16.905312251304622], [-13.151883321062884, -9.248841600835643], [31.90877120451505, 15.74736877777276], [30.63534081775581, 16.95736845341867], [10.68440286399974, 16.221590709428895], [31.959494377171385, 15.709545590960106], [11.335574691668606, -18.19333876063648], [8.019293844676866, 27.727354296777936], [-9.80211046272696, -5.117071555290482], [-15.07541442772159, 16.479272488362067], [-10.361135406958073, 30.1435059978468], [1.6120560376095823, -8.735639427147648], [-4.006583295683287, 14.158979317649177], [18.549658165018084, 22.001282220632117], [-19.183443650095054, -16.846557948066906], [12.963514477085296, 13.33406385476203], [-0.3735375779807193, -13.252479029080844], [23.589375348308668, 14.102441846902321], [-6.593293800993413, -7.171388551923981], [-27.05531402742184, -13.569857990353565], [-11.918898613205723, 15.272868017468577], [-6.713301667137102, -25.79089003903268], [17.42793485653013, -5.409976425823936], [27.99677534077158, -11.687440537364402], [-22.815482744349147, -0.0791948774525402], [-9.105238573347245, 8.09334831566449], [13.313038287551672, 18.30381803213583], [12.771658522868393, 15.305256183781566], [20.8915372642917, 9.646588912280203], [-14.489472173138743, -9.581186138478285], [20.49021092767404, 2.9870518124622927], [-9.888611620302495, 0.1609277984645302], [-6.663871746849431, 26.846670574764392], [12.559088758879335, -20.889584152158058], [8.46406458781593, 22.006755154198736], [1.4836203914852215, 22.17242072452765], [-5.233718598749972, -13.161441282288166], [4.0707029236034575, -1.5199419229484403], [-5.1072633781168015, 15.544812904851256], [0.2847063213919344, -13.035775128715045], [33.351236079684526, 15.081254399165726], [14.41825169675902, 14.27695884282592], [-30.942134114781606, -3.3653965362298437], [-15.079555557897942, 11.817911822534143], [5.701578412909404, 26.687174710212005], [-8.557331435693387, -3.759427756543067], [7.153939411308628, -29.547282164300633], [-9.857917404789465, 10.735164729857178], [-5.659996214752237, -0.5410795677001634], [27.640492046737112, -0.15264712945825806], [-11.129659609463316, -4.741662900546093], [-4.690031562197201, 25.18943014862488], [-2.437686217481747, 32.20962432027622], [-14.261818251687165, 20.769876759462676], [2.530671879433484, 21.767495230531352], [-10.660709146715034, 8.305342136354872], [-1.2302035257863295, -11.503540152495816], [21.948450126920097, 10.859829172008116], [9.035866914275017, -12.897817223138366], [0.8587089905312971, 29.102313095682206], [-23.930561587402362, -8.077590399954596], [22.382733293850066, -5.930221020714374], [11.5442198255793, 32.192066579707834], [14.834875720895582, -19.262980380441512], [1.0925609527195594, -12.434733650485926], [8.402753794016041, 31.105243356775908], [-9.341629582613834, 27.166100071093933], [1.6411996540479432, -4.133700356837209], [-25.25813609399135, -8.257082463487981], [-5.380667239574153, 30.089586659245995], [12.428312482615437, 13.196855014814844], [17.15727182857505, -4.085058579896695], [9.669530433619443, 15.842061634578476], [1.2136399999547172, 30.068165198064225], [10.351256384741635, -23.711802054382538], [-4.445906259002562, -9.238632230002004], [-6.557665170916199, 14.860985476161249], [-1.3010461233355342, -10.022840391409026], [-17.806401393230527, -13.904927523518865], [2.1058003898066926, 20.89198384729176], [-11.840689581599916, 21.157815211942662], [-23.89992431669437, 11.311182534917014], [12.308088771132924, -24.0038778235608], [7.9101192287327144, -32.89016639575473], [-16.146666554638614, 5.890752108322501], [-11.205995297015187, 6.940928210785562], [-24.516235158162754, -11.060242715134022], [19.204785767653018, 4.997458369071061], [-8.831767484216495, 23.123710734750958], [-14.52042703942374, 15.155944341300621], [-1.0656557795983421, -8.768908559967196], [7.900845110669491, 8.177206130376842], [-0.8048073271475209, -15.52347746466773], [11.773827747922379, 29.426960531915835], [-15.426787458380842, 10.404134426854554], [11.674843900603813, 26.80548387634652], [-13.324279187136849, -13.803593393568653], [-23.02125242075563, -5.94829534960281], [20.473378214372044, 5.5565644240068135], [-8.042823219783525, 23.911308342460686], [4.687607336210782, 14.6960271525238], [20.103549355782956, 5.098367959387001], [16.986436125562342, 18.990726721033553], [19.196716961894882, -22.953621755773575], [11.2276466563455, -7.6027367014977685], [-17.912188436763174, 20.868817509352493], [-4.1830184157775925, -25.245230475306343], [-3.700731179447561, 11.24084363591506], [-4.985714336376078, -14.71334863845859], [32.71188361617097, 15.558124335316712], [9.97828156479104, 17.012593008606075], [15.527456339133419, 23.685026331824197], [2.6051235827493535, 3.9449830892536704], [4.53122275243503, -0.44850261641564587], [-3.697367165100449, -19.05105123482416], [20.104853100160376, 4.878872335379389], [-9.166858459440414, 6.0291376822862315], [32.06396132399813, 15.704136719848197], [8.099209375048655, -12.555824521255227], [-11.752002300247419, 15.339618965798298], [-5.209430907579382, -11.59510835957572], [-3.8472731882518625, -5.639248409753837], [-27.946116135433414, 1.1503755595511902], [0.639901115081329, 27.774112137540307], [3.79385356875315, -16.0166627245544], [-4.043970488277403, -9.903830293970538], [7.719861215790544, 24.737594961043996], [19.222852240206386, -22.88260493179892], [32.13040731661497, 15.76808597766987], [-3.0114387949883725, -23.23831895764517], [8.209918298309228, 31.19218080449906], [18.599303025783602, 3.009524152494572], [0.5085646400158876, -8.301320901468271], [-23.13505059073879, 8.059220221339823], [-2.9324540629786644, 6.282786214798083], [18.602594656519393, 23.50930408923887], [0.0150330031912707, 17.551452440327065], [-0.238905091991667, -7.929209132377328], [-2.807778992487783, 27.013024203140326], [-13.721281154153482, -20.974495266407693], [18.71913017533701, -1.4514449194950063], [-24.928961366335933, -18.981729790420527], [-5.370294485548953, -11.921702292761893], [-8.100803561114676, 3.645026262173642], [-23.3911330786455, -15.76902579420657], [22.3476961693004, 8.21419960200082], [33.334070374259134, 15.09402897631465], [18.54518151577397, 23.612561116655595], [-0.7811139898594204, 9.177365546845254], [7.908040675611289, -32.88464544081334], [3.952456107294635, 4.4939342267749804], [-20.000863217088526, 11.80724087697747], [22.389502018566052, 8.014162759357506], [-3.7972034016092366, -7.181298777400349], [-26.459477768546606, 14.934207736415651], [-10.521359882437267, 6.166374010257417], [-15.359082433317996, 12.252568942262325], [10.125630016430227, -13.944095406553936], [-0.5271084694353002, 22.296814790150805], [19.112294690694718, 9.671743448062426], [-29.36614331340189, -1.6132565609659966], [-25.523656568862688, -15.640536349598605], [-22.76461408761037, 12.003484268671544], [-14.253926567549012, 5.475403896638776], [7.477329787672417, 12.611574391126673], [-10.860571296511795, 22.191100658063302], [-3.4334517407835548, -23.076526426514786], [-18.24726066034178, -6.274105831357984], [7.909534144787051, -32.88678633945206], [-2.94968169382515, -18.64141852339837], [7.017166190394279, -29.426154043541775], [-13.432042741023416, -13.666295644214616], [13.148880935264968, -12.89208703764394], [-9.057297864741686, -8.735969778859301], [-33.15755308588702, 0.8626788351759902], [-22.726396993540487, 11.225478110232919], [12.860422209048414, 14.37247001498675], [33.28079023444879, 15.118732084013214], [-25.55334530252564, -7.010091877269528], [5.015723809859515, 8.885270264025854], [14.484029768433292, 10.786072577401042], [10.314697185081663, -23.9539350026607], [-11.70956561484766, -21.95183689489829], [-0.3113854775634885, 23.299163815403052], [14.256222072502494, -15.442205332287026], [10.894981195079424, 28.66838736679244], [-8.594130251393018, -11.24639613726733], [2.7915920223041466, 28.944471834469624], [-24.475926813414823, -12.238868664847915], [-6.7067535876919075, 30.801243562814715], [-18.26695415828276, 22.31189509868388], [-9.058282458578912, -8.901397971113056], [-3.9983000679202725, 22.852119248468355], [1.8522099200067985, -19.599624510666878], [-3.7709837091219, -6.944183618528032], [3.734297959569019, 21.95171418898427], [11.07182733707543, 27.840617394125882], [0.23312446377015592, 14.48636763593596], [12.264573177077528, -23.913006433720575], [-5.626403900560809, -8.207456668608625], [-28.562324817978137, 11.698679294857584]]}, \"id\": \"el23682140175246715216\"});\n",
+        "      });\n",
+        "    });\n",
+        "}else{\n",
+        "    // require.js not available: dynamically load d3 & mpld3\n",
+        "    mpld3_load_lib(\"https://mpld3.github.io/js/d3.v3.min.js\", function(){\n",
+        "         mpld3_load_lib(\"https://mpld3.github.io/js/mpld3.v0.2.js\", function(){\n",
+        "                 \n",
+        "                 mpld3.draw_figure(\"fig_el236821401752467152165224441100\", {\"axes\": [{\"xlim\": [-40.0, 40.0], \"yscale\": \"linear\", \"axesbg\": \"#EEEEEE\", \"texts\": [], \"zoomable\": true, \"images\": [], \"xdomain\": [-40.0, 40.0], \"ylim\": [-40.0, 40.0], \"paths\": [], \"sharey\": [], \"sharex\": [], \"axesbgalpha\": null, \"axes\": [{\"scale\": \"linear\", \"tickformat\": null, \"grid\": {\"color\": \"#FFFFFF\", \"alpha\": 1.0, \"dasharray\": \"10,0\", \"gridOn\": true}, \"fontsize\": 10.0, \"position\": \"bottom\", \"nticks\": 9, \"tickvalues\": null}, {\"scale\": \"linear\", \"tickformat\": null, \"grid\": {\"color\": \"#FFFFFF\", \"alpha\": 1.0, \"dasharray\": \"10,0\", \"gridOn\": true}, \"fontsize\": 10.0, \"position\": \"left\", \"nticks\": 9, \"tickvalues\": null}], \"lines\": [], \"markers\": [], \"id\": \"el23682140175056692368\", \"ydomain\": [-40.0, 40.0], \"collections\": [{\"paths\": [[[[0.0, -0.5], [0.13260155, -0.5], [0.25978993539242673, -0.44731684579412084], [0.3535533905932738, -0.3535533905932738], [0.44731684579412084, -0.25978993539242673], [0.5, -0.13260155], [0.5, 0.0], [0.5, 0.13260155], [0.44731684579412084, 0.25978993539242673], [0.3535533905932738, 0.3535533905932738], [0.25978993539242673, 0.44731684579412084], [0.13260155, 0.5], [0.0, 0.5], [-0.13260155, 0.5], [-0.25978993539242673, 0.44731684579412084], [-0.3535533905932738, 0.3535533905932738], [-0.44731684579412084, 0.25978993539242673], [-0.5, 0.13260155], [-0.5, 0.0], [-0.5, -0.13260155], [-0.44731684579412084, -0.25978993539242673], [-0.3535533905932738, -0.3535533905932738], [-0.25978993539242673, -0.44731684579412084], [-0.13260155, -0.5], [0.0, -0.5]], [\"M\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"Z\"]]], \"edgecolors\": [\"#000000\"], \"edgewidths\": [1.0], \"offsets\": \"data01\", \"yindex\": 1, \"id\": \"el23682140174890030096\", \"pathtransforms\": [[11.11111111111111, 0.0, 0.0, 11.11111111111111, 0.0, 0.0]], \"pathcoordinates\": \"display\", \"offsetcoordinates\": \"data\", \"zorder\": 1, \"xindex\": 0, \"alphas\": [0.1], \"facecolors\": [\"#3EEEEE\"]}], \"xscale\": \"linear\", \"bbox\": [0.125, 0.125, 0.77500000000000002, 0.77500000000000002]}], \"height\": 640.0, \"width\": 640.0, \"plugins\": [{\"type\": \"reset\"}, {\"enabled\": false, \"button\": true, \"type\": \"zoom\"}, {\"enabled\": false, \"button\": true, \"type\": \"boxzoom\"}, {\"voffset\": 10, \"labels\": [\"the\", \",\", \".\", \"to\", \"of\", \"and\", \"a\", \"in\", \"\\\"\", \"'s\", \"that\", \"for\", \"on\", \"is\", \"The\", \"was\", \"with\", \"said\", \"as\", \"at\", \"it\", \"by\", \"from\", \"be\", \"he\", \"have\", \"has\", \"his\", \"are\", \"an\", \")\", \"not\", \"(\", \"will\", \"who\", \"I\", \"had\", \"their\", \"were\", \"--\", \"they\", \"but\", \"this\", \"been\", \"more\", \"which\", \"or\", \"its\", \"would\", \"about\", \":\", \"after\", \"up\", \"one\", \"$\", \"than\", \"also\", \"her\", \"'t\", \"out\", \"you\", \"when\", \"year\", \"It\", \"people\", \"two\", \"-\", \"over\", \"can\", \"all\", \"first\", \"But\", \"into\", \"'\", \"He\", \"last\", \"A\", \"we\", \"In\", \"she\", \"other\", \"new\", \"could\", \"years\", \"there\", \"?\", \"time\", \"some\", \"them\", \"if\", \"no\", \"percent\", \"so\", \"only\", \"what\", \"government\", \"just\", \"million\", \"before\", \"him\", \"U.S.\", \"most\", \"because\", \"like\", \"now\", \"three\", \"being\", \";\", \"do\", \"against\", \"where\", \"Obama\", \"made\", \"New\", \"Mr\", \"many\", \"week\", \"off\", \"back\", \"down\", \"since\", \"told\", \"/\", \"while\", \"any\", \"our\", \"make\", \"says\", \"world\", \"get\", \"\\u00a3\", \"through\", \"We\", \"such\", \"company\", \"may\", \"those\", \"even\", \"home\", \"how\", \"say\", \"This\", \"per\", \"much\", \"should\", \"country\", \"between\", \"still\", \"including\", \"then\", \"police\", \"way\", \"during\", \"And\", \"did\", \"take\", \"next\", \"work\", \"They\", \"under\", \"my\", \"your\", \"United\", \"day\", \"well\", \"state\", \"second\", \"found\", \"Mr.\", \"very\", \"public\", \"officials\", \"former\", \"group\", \"billion\", \"four\", \"US\", \"part\", \"another\", \"around\", \"There\", \"American\", \"10\", \"help\", \"President\", \"both\", \"end\", \"Monday\", \"Tuesday\", \"Friday\", \"Wednesday\", \"these\", \"left\", \"set\", \"see\", \"months\", \"month\", \"children\", \"market\", \"good\", \"man\", \"Thursday\", \"go\", \"York\", \"going\", \"That\", \"report\", \"reported\", \"team\", \"%\", \"own\", \"money\", \"If\", \"five\", \"too\", \"game\", \"used\", \"number\", \"business\", \"same\", \"think\", \"days\", \"president\", \"China\", \"financial\", \"As\", \"called\", \"season\", \"don\", \"won\", \"me\", \"expected\", \"family\", \"long\", \"...\", \"1\", \"health\", \"need\", \"show\", \"might\", \"few\", \"She\", \"according\", \"!\", \"use\", \"least\", \"right\", \"know\", \"cent\", \"AP\", \"'re\", \"come\", \"life\", \"later\", \"States\", \"want\", \"put\", \"took\", \"came\", \"high\", \"Sunday\", \"night\", \"support\", \"points\", \"2008\", \"ago\", \"city\", \"top\", \"early\", \"case\", \"place\", \"best\", \"political\", \"For\", \"past\", \"far\", \"us\", \"already\", \"military\", \"whether\", \"without\", \"third\", \"until\", \"each\", \"2009\", \"system\", \"House\", \"British\", \"economic\", \"less\", \"Saturday\", \"companies\", \"deal\", \"court\", \"among\", \"South\", \"today\", \"away\", \"never\", \"women\", \"win\", \"30\", \"six\", \"little\", \"20\", \"London\", \"here\", \"security\", \"added\", \"got\", \"school\", \"killed\", \"At\", \"men\", \"recent\", \"campaign\", \"several\", \"news\", \"members\", \"lead\", \"chief\", \"&\", \"John\", \"information\", \"run\", \"better\", \"big\", \"every\", \"economy\", \"local\", \"change\", \"pay\", \"Washington\", \"likely\", \"On\", \"quarter\", \"power\", \"hit\", \"party\", \"2\", \"major\", \"plan\", \"start\", \"become\", \"care\", \"2007\", \"taken\", \"play\", \"half\", \"death\", \"making\", \"does\", \"announced\", \"across\", \"went\", \"area\", \"One\", \"head\", \"When\", \"prices\", \"North\", \"must\", \"England\", \"industry\", \"'ve\", \"give\", \"car\", \"sales\", \"lost\", \"final\", \"National\", \"enough\", \"though\", \"America\", \"law\", \"held\", \"office\", \"You\", \"near\", \"find\", \"plans\", \"Iraq\", \"March\", \"times\", \"move\", \"countries\", \"national\", \"seen\", \"given\", \"service\", \"small\", \"bank\", \"again\", \"died\", \"really\", \"weeks\", \"services\", \"global\", \"known\", \"close\", \"European\", \"late\", \"Bush\", \"World\", \"saying\", \"spokesman\", \"keep\", \"statement\", \"11\", \"record\", \"earlier\", \"future\", \"oil\", \"official\", \"international\", \"point\", \"15\", \"University\", \"led\", \"tax\", \"job\", \"war\", \"After\", \"UK\", \"program\", \"'m\", \"Clinton\", \"12\", \"leader\", \"having\", \"federal\", \"house\", \"decision\", \"share\", \"nearly\", \"cut\", \"site\", \"taking\", \"something\", \"West\", \"Police\", \"election\", \"face\", \"others\", \"whose\", \"3\", \"almost\", \"working\", \"June\", \"So\", \"due\", \"His\", \"capital\", \"look\", \"return\", \"began\", \"City\", \"behind\", \"young\", \"meeting\", \"leaders\", \"able\", \"increase\", \"great\", \"asked\", \"director\", \"games\", \"April\", \"executive\", \"2006\", \"hours\", \"Reuters\", \"price\", \"call\", \"trying\", \"further\", \"5\", \"cost\", \"free\", \"current\", \"Britain\", \"What\", \"With\", \"State\", \"often\", \"series\", \"once\", \"banks\", \"fell\", \"believe\", \"rate\", \"following\", \"side\", \"crisis\", \"along\", \"yet\", \"open\", \"Afghanistan\", \"issue\", \"didn\"], \"hoffset\": 0, \"location\": \"mouse\", \"type\": \"tooltip\", \"id\": \"el23682140174890030096\"}], \"data\": {\"data01\": [[21.326837091636413, 8.898015357788914], [26.552312533562844, -17.07482212432841], [16.058276593535627, -27.75581496190842], [1.4293334399177662, 24.67769251226917], [1.0519408414003706, 24.22731322740855], [11.201903504205491, 22.92732611218994], [14.993220531072085, 8.955800222651229], [-0.6974387682362492, 24.79743999994471], [32.193402207756044, -9.589085489133963], [21.647470996164603, 8.304137443124835], [12.040667165261144, -12.872135367700325], [0.5494316814603887, 24.429753015138743], [1.5068329180503512, 22.222459729087795], [7.55702046922931, 24.780259866150228], [22.260478394809837, 8.076773356442112], [7.517766606467549, 24.839487261594144], [-0.4983783632215074, 23.4340431603124], [-18.516488489506724, 22.059217553886437], [2.177410681532453, 28.336270277732055], [18.50773781896586, 21.855110734945388], [21.017469049584022, -23.07950409011081], [1.2248738941350115, 24.736956209970238], [2.3554580189645375, 23.026775086541612], [8.392056658979245, 24.923431354648375], [21.7806100716035, -22.205641317844666], [8.21159008031872, 31.257048285790574], [8.219487802922728, 31.24706745151396], [22.521353548175615, 7.936873548328098], [7.542993144240617, 24.775861907022634], [18.47861275761377, -2.876954373563808], [9.7552403033258, 30.033356703671604], [12.972721252812022, 26.366087173774343], [20.12464948822749, -9.713436924074665], [11.532653564740178, 32.17139448144888], [-12.587030683036138, -22.909400143843964], [-16.780151846468247, -19.657602492871387], [8.16519330785403, 31.236427911370967], [22.335739971114094, 7.793304371954973], [7.503844831859722, 24.816103997971133], [-1.7762089303056718, -29.80965680574088], [-23.129349863576486, -17.649972192235712], [0.9331514003906126, 30.522196430798385], [10.600099830684224, 0.5917199170183722], [8.441223517181975, 24.953842557099126], [14.989999262937085, 18.875634830888103], [1.483037979391326, 29.757825593574182], [11.208327377144848, 22.93144376635637], [21.846073724563034, 8.083106432955326], [11.506572429308418, 32.28022630528121], [18.792860198684767, 23.08057213959244], [32.05012995867989, -9.583771006217821], [0.5625288254349438, 27.664875246333054], [-7.973046685411586, 11.487956207404718], [21.992402663538375, 10.894696350025797], [30.60895264003623, -7.259862599430695], [18.383176955326306, 23.68954700782877], [11.177951934389807, 29.874089328823032], [22.561469309766434, 8.012963733778383], [12.752499142701549, 26.530932419011638], [-16.885056157390707, 3.635897498092722], [-17.708583184151937, -14.002436389822185], [0.8321870319830789, 29.160287424127535], [-12.108410017279196, -14.433048667594797], [21.001134633076767, -23.048897616380934], [-20.258930826383907, -17.83807857770846], [30.564665743339255, 17.072732459548426], [-1.7714432947713974, -29.81318378852695], [4.041980969667683, 22.65592380612696], [11.534022727743553, 32.231310481285654], [11.963615739470585, 24.745172876889363], [32.53259367661615, 6.9590742019448175], [4.023280670020708, 4.878156764884759], [1.1038369688571896, 22.1349158521133], [32.17358316696962, -9.442971689119158], [21.74319846601278, -22.098031016852982], [30.315829922711636, 6.283648966496529], [24.8880914356143, 11.14001251371097], [-23.061983922473726, -19.854126281183614], [-0.6462977165300969, 25.968262743455735], [21.781611792468944, -22.216288267107576], [13.480496804040136, 17.478000001462213], [14.335895307739179, 10.497585067544692], [11.502374470066169, 32.29194117844512], [-13.339750741894543, -13.895642524972937], [-11.778976426905759, -27.74313735511682], [14.817147520307167, -29.70657639355915], [-8.627752299488828, 2.7289624551887326], [23.407875729242598, 15.00073902609439], [-19.575662998539656, -20.90657891489391], [0.8031444803209233, 29.369950534894606], [9.961401733241892, 15.97426153731928], [0.17112385493699767, 8.086009298234673], [14.82976080827882, 25.604831100694994], [12.19217470686455, 26.46471475617176], [-11.72354893171856, -21.96620979929386], [2.1212988220289897, -14.440418856171886], [11.193908723438295, 25.679604100901607], [25.43992208257377, 16.09587834485495], [0.7659251834996323, 27.965476132468456], [9.081689248771003, -6.131683078737462], [21.937744734443875, 2.4185609695726304], [16.138857515363725, 27.10592209875736], [0.41711656860909174, 30.045766302576038], [0.10210420434968541, 24.754811265743143], [10.520247134386896, 28.9531904046865], [30.59953375500458, 17.025271793468747], [9.26201190786061, 24.83911611494335], [3.510540759157428, 5.5594279424930475], [-2.4717046791003496, 32.121538323782126], [0.6565271895969371, 23.598963359715405], [0.9921055742176952, 29.44689816477283], [19.239664046377, -22.959084770494705], [-4.740116731603784, 25.243058861803636], [23.406719707310884, -3.735602072360806], [30.41821656502054, -12.74150534707233], [23.672251102848506, 14.90379103492237], [-12.116619207094436, -14.416321150826109], [2.4306011960240728, 19.809668725267056], [-1.2007017559574922, 10.496492381881598], [-8.009439781796893, 11.551138257457877], [0.9572826566694628, 28.174602051785598], [-13.384747082327848, 26.43920296369149], [13.787769233397324, -8.201991147259934], [0.8191178393366099, 30.142893388108476], [9.79885272850722, 15.866865545597328], [22.484171959774436, 7.465074591001351], [-4.700354706244607, 25.20697099176686], [-18.345665542034467, 22.163110046815316], [-0.5727195355324806, -11.95020897491011], [-10.359020275914059, 30.145526751069955], [30.545583826382522, -7.331402888656592], [-0.7236132902972039, 24.029544739113845], [-23.051566956643857, -19.863418689228467], [6.182502702368126, 20.86796776189528], [-0.9470136011178839, -15.274797290330422], [11.508722244061005, 32.29502908074644], [-17.572861715472644, -18.148299084837433], [10.065669425960792, 26.21230409274836], [0.5522243643871882, -7.86741129553939], [-1.1305090828198718, 28.792043929998375], [-18.26955903287577, 22.304102980351278], [10.524580073041802, 0.5626793382927849], [27.06234553037238, 15.444434397524699], [16.236855801674793, 29.857284731082196], [11.525166136739525, 32.218367371761765], [-0.6281769338214941, -11.95190316626785], [21.656454670892, 18.39376678382621], [10.463785546149763, 28.640098582638785], [-1.691631440037904, 24.532330615325296], [11.814083505208698, 30.06505548071847], [-24.62539613776038, -18.661776975149323], [-21.5871401483112, 7.254843004899713], [-0.874027455119267, 26.017525218931375], [4.042404763893815, 4.907417510390749], [-2.4453924740707227, 32.20633472548233], [-2.8166139202293046, 27.02877413604358], [30.240822418076608, 6.263478728104897], [-12.308047529920172, -4.531870130314372], [-22.977758148268368, -17.386950328594367], [-3.848678583144392, 21.71254059816739], [22.646314158615155, 7.381972185193957], [22.656027178969218, 7.294084861231865], [17.60370843693668, -11.541312458478387], [-12.205609700200245, -14.233036479571421], [11.984962426503532, 28.72390912680927], [0.999626070104138, -10.901555615950235], [32.48669985812717, 6.976411379646161], [-17.820212829285648, 24.13129350494978], [30.398175100750752, -12.722270466476356], [15.275908596394878, 26.081934525827872], [11.736705511792387, 2.256524042633843], [-25.03502245177232, -16.47069853747343], [23.45756680324648, 2.6301922171270884], [-0.8795512425706745, -13.961441159316356], [25.40692628806787, 16.143525582200365], [30.604470034448532, 16.9942301553679], [21.94351254479905, 2.4212980511201545], [-19.181226318396916, 2.0083180882290965], [21.729054741922297, 10.718075657091045], [18.72454480244623, 22.462587046370345], [-11.77466927955963, -27.745174855819208], [21.628525084310578, 3.6796873619709562], [32.643895893606484, 15.556426957420884], [-13.137488665117266, 29.782870189144717], [-1.4674909792058624, -25.715855358275086], [24.010834677580707, 12.885548105650201], [-7.917707022756259, 5.425114860432707], [4.581875183618064, -31.286963017016525], [4.57341096374525, -31.289718308780927], [4.577337244317479, -31.286243003880603], [4.575759207783279, -31.28592379337672], [20.356597971902886, 13.39245419950422], [-4.769541036067904, 6.088455432279367], [-6.1154872017967605, 6.205411777089007], [-7.030342398971921, 23.69098271465164], [-13.34146790721924, -13.868172983848849], [-12.132429850359506, -14.40217943619422], [-19.22094351639214, -16.938443395404253], [1.0511047544428156, -11.422549891528613], [7.237701988982829, 13.133499451542761], [-5.684641681252351, -20.01558157624934], [4.582683899830642, -31.28547096481513], [-10.693343024691243, 8.213761078897406], [12.058967658159085, -18.17022951116654], [-10.51755261150636, 8.211645585097921], [12.142907451179953, -12.906690820374534], [-4.616433523154405, -14.208209802268978], [-16.3349283866968, 19.688347725198994], [0.1496701904599421, -11.028497693470262], [0.1659144197429267, 8.076701718425513], [1.5571733866141009, 20.398335693372864], [-12.942920010944663, -10.942413607643642], [0.833336404511145, 29.374598377102433], [30.602650126689042, 16.975543552547013], [15.010972580301274, 25.940577145963168], [-6.837441477708523, -11.963887515865322], [-18.723127000394193, 15.435942866030734], [-31.153815866228513, -9.384979737907146], [-8.65719027829307, -5.457726863275036], [12.187053898360787, 13.61123679488898], [-18.510041684208865, 22.596276086582964], [-13.377630745963913, -13.814879779114102], [-1.5108610944300314, -24.7099459708784], [10.686158616758716, -24.362520966525917], [13.367418913555143, 4.952054119870182], [2.0614040648262755, 28.432777575293812], [-13.294860235422814, 18.098569896287334], [-11.103511840771457, -13.146050625675423], [-28.677594142057544, 11.776829762942285], [-2.643616537169468, 15.641860172277564], [-19.533511321743124, -20.984999411554977], [-15.252602171652764, 24.3956323445626], [0.16630594927254708, -12.789212874354838], [12.078472301998383, 20.5660255510213], [3.7025742848491, 5.481828851843986], [33.38087926041163, 15.088992261578314], [12.837625841709535, 4.993675039443209], [-21.414559873412625, 15.296372630933979], [-18.261499235756716, 24.60032488216632], [11.509075951108299, 32.28112233418039], [24.162869828547688, 14.519631046444198], [21.726429347451308, -22.115871161261076], [-20.356576501258136, 10.364651316132985], [14.921936021238926, -29.287298544566177], [-8.55596455500222, 5.119348562930224], [18.488333244479218, 23.577315674769505], [5.385708629997409, 16.7394469123253], [-17.467146168730324, 22.32588448282366], [0.1523024011309557, 8.072262488195326], [14.848024408832167, -15.486608303267808], [7.674813489417874, 24.752859445064885], [-25.22575565378973, 19.124859482915735], [-11.381801287356247, -2.762907794472126], [15.512494374518887, 23.73827741277325], [4.314194300176278, -15.82561000282019], [-21.621991813326343, 15.182766295883688], [-5.7291306160059206, 10.755602919256162], [-2.8184463049425736, 27.031889184381864], [-25.225342337913386, 19.126107225016142], [10.535907908061233, 17.83994159292266], [4.593496059510578, -31.284916300881843], [7.655233151488982, -5.60630833533646], [-16.54764214757169, 4.8694952474737425], [-15.033259712792512, -5.81103736428975], [7.434465740517177, -29.61122179884137], [5.431263148212133, 4.1785935682489335], [-0.5221428903225238, -10.478278996809333], [17.859844664923536, 12.124617578829417], [16.982680195293668, 18.98740754399003], [-4.9605735768512975, -8.922501029089783], [-5.35179819136186, -9.477298157197454], [15.072620584276706, 15.335935353272799], [14.303111640259349, 6.038667101712633], [0.6449589647853732, 24.38608057223447], [21.52505140080801, 5.406709056557302], [16.20602542984779, 29.882661228484636], [-19.556532705440652, -20.946327980363332], [10.563707205358117, 28.91096772899889], [3.1801712683865953, -15.114537205108856], [-19.320221690282334, 21.617793747031705], [1.4818570256107502, 25.239882052813662], [32.46826476034903, 6.987781244424658], [0.9569873619254045, 28.345275115920273], [20.909238061744823, 9.825342552620997], [7.681672212387564, -29.596572718030245], [-4.12943192366711, -9.715091955651335], [1.142565508369446, -16.851883726660787], [21.625397524654122, 3.6344259125304212], [13.6315491292344, 5.990461800400485], [14.948715874670834, 18.83720353239687], [4.594607275740241, -31.28258242251949], [-23.864475708015565, -12.222127735360349], [-28.824383127538038, -0.4910903251436104], [-0.3150341299940598, -18.330467078074527], [0.04519711579052857, 23.54405538372855], [22.349808617359077, -6.067220673589118], [4.321013726283417, -31.316006580084796], [-8.322377155868649, 11.93305939750173], [12.758092441027355, 26.5653905493652], [-19.196117228834975, -16.905312251304622], [-13.151883321062884, -9.248841600835643], [31.90877120451505, 15.74736877777276], [30.63534081775581, 16.95736845341867], [10.68440286399974, 16.221590709428895], [31.959494377171385, 15.709545590960106], [11.335574691668606, -18.19333876063648], [8.019293844676866, 27.727354296777936], [-9.80211046272696, -5.117071555290482], [-15.07541442772159, 16.479272488362067], [-10.361135406958073, 30.1435059978468], [1.6120560376095823, -8.735639427147648], [-4.006583295683287, 14.158979317649177], [18.549658165018084, 22.001282220632117], [-19.183443650095054, -16.846557948066906], [12.963514477085296, 13.33406385476203], [-0.3735375779807193, -13.252479029080844], [23.589375348308668, 14.102441846902321], [-6.593293800993413, -7.171388551923981], [-27.05531402742184, -13.569857990353565], [-11.918898613205723, 15.272868017468577], [-6.713301667137102, -25.79089003903268], [17.42793485653013, -5.409976425823936], [27.99677534077158, -11.687440537364402], [-22.815482744349147, -0.0791948774525402], [-9.105238573347245, 8.09334831566449], [13.313038287551672, 18.30381803213583], [12.771658522868393, 15.305256183781566], [20.8915372642917, 9.646588912280203], [-14.489472173138743, -9.581186138478285], [20.49021092767404, 2.9870518124622927], [-9.888611620302495, 0.1609277984645302], [-6.663871746849431, 26.846670574764392], [12.559088758879335, -20.889584152158058], [8.46406458781593, 22.006755154198736], [1.4836203914852215, 22.17242072452765], [-5.233718598749972, -13.161441282288166], [4.0707029236034575, -1.5199419229484403], [-5.1072633781168015, 15.544812904851256], [0.2847063213919344, -13.035775128715045], [33.351236079684526, 15.081254399165726], [14.41825169675902, 14.27695884282592], [-30.942134114781606, -3.3653965362298437], [-15.079555557897942, 11.817911822534143], [5.701578412909404, 26.687174710212005], [-8.557331435693387, -3.759427756543067], [7.153939411308628, -29.547282164300633], [-9.857917404789465, 10.735164729857178], [-5.659996214752237, -0.5410795677001634], [27.640492046737112, -0.15264712945825806], [-11.129659609463316, -4.741662900546093], [-4.690031562197201, 25.18943014862488], [-2.437686217481747, 32.20962432027622], [-14.261818251687165, 20.769876759462676], [2.530671879433484, 21.767495230531352], [-10.660709146715034, 8.305342136354872], [-1.2302035257863295, -11.503540152495816], [21.948450126920097, 10.859829172008116], [9.035866914275017, -12.897817223138366], [0.8587089905312971, 29.102313095682206], [-23.930561587402362, -8.077590399954596], [22.382733293850066, -5.930221020714374], [11.5442198255793, 32.192066579707834], [14.834875720895582, -19.262980380441512], [1.0925609527195594, -12.434733650485926], [8.402753794016041, 31.105243356775908], [-9.341629582613834, 27.166100071093933], [1.6411996540479432, -4.133700356837209], [-25.25813609399135, -8.257082463487981], [-5.380667239574153, 30.089586659245995], [12.428312482615437, 13.196855014814844], [17.15727182857505, -4.085058579896695], [9.669530433619443, 15.842061634578476], [1.2136399999547172, 30.068165198064225], [10.351256384741635, -23.711802054382538], [-4.445906259002562, -9.238632230002004], [-6.557665170916199, 14.860985476161249], [-1.3010461233355342, -10.022840391409026], [-17.806401393230527, -13.904927523518865], [2.1058003898066926, 20.89198384729176], [-11.840689581599916, 21.157815211942662], [-23.89992431669437, 11.311182534917014], [12.308088771132924, -24.0038778235608], [7.9101192287327144, -32.89016639575473], [-16.146666554638614, 5.890752108322501], [-11.205995297015187, 6.940928210785562], [-24.516235158162754, -11.060242715134022], [19.204785767653018, 4.997458369071061], [-8.831767484216495, 23.123710734750958], [-14.52042703942374, 15.155944341300621], [-1.0656557795983421, -8.768908559967196], [7.900845110669491, 8.177206130376842], [-0.8048073271475209, -15.52347746466773], [11.773827747922379, 29.426960531915835], [-15.426787458380842, 10.404134426854554], [11.674843900603813, 26.80548387634652], [-13.324279187136849, -13.803593393568653], [-23.02125242075563, -5.94829534960281], [20.473378214372044, 5.5565644240068135], [-8.042823219783525, 23.911308342460686], [4.687607336210782, 14.6960271525238], [20.103549355782956, 5.098367959387001], [16.986436125562342, 18.990726721033553], [19.196716961894882, -22.953621755773575], [11.2276466563455, -7.6027367014977685], [-17.912188436763174, 20.868817509352493], [-4.1830184157775925, -25.245230475306343], [-3.700731179447561, 11.24084363591506], [-4.985714336376078, -14.71334863845859], [32.71188361617097, 15.558124335316712], [9.97828156479104, 17.012593008606075], [15.527456339133419, 23.685026331824197], [2.6051235827493535, 3.9449830892536704], [4.53122275243503, -0.44850261641564587], [-3.697367165100449, -19.05105123482416], [20.104853100160376, 4.878872335379389], [-9.166858459440414, 6.0291376822862315], [32.06396132399813, 15.704136719848197], [8.099209375048655, -12.555824521255227], [-11.752002300247419, 15.339618965798298], [-5.209430907579382, -11.59510835957572], [-3.8472731882518625, -5.639248409753837], [-27.946116135433414, 1.1503755595511902], [0.639901115081329, 27.774112137540307], [3.79385356875315, -16.0166627245544], [-4.043970488277403, -9.903830293970538], [7.719861215790544, 24.737594961043996], [19.222852240206386, -22.88260493179892], [32.13040731661497, 15.76808597766987], [-3.0114387949883725, -23.23831895764517], [8.209918298309228, 31.19218080449906], [18.599303025783602, 3.009524152494572], [0.5085646400158876, -8.301320901468271], [-23.13505059073879, 8.059220221339823], [-2.9324540629786644, 6.282786214798083], [18.602594656519393, 23.50930408923887], [0.0150330031912707, 17.551452440327065], [-0.238905091991667, -7.929209132377328], [-2.807778992487783, 27.013024203140326], [-13.721281154153482, -20.974495266407693], [18.71913017533701, -1.4514449194950063], [-24.928961366335933, -18.981729790420527], [-5.370294485548953, -11.921702292761893], [-8.100803561114676, 3.645026262173642], [-23.3911330786455, -15.76902579420657], [22.3476961693004, 8.21419960200082], [33.334070374259134, 15.09402897631465], [18.54518151577397, 23.612561116655595], [-0.7811139898594204, 9.177365546845254], [7.908040675611289, -32.88464544081334], [3.952456107294635, 4.4939342267749804], [-20.000863217088526, 11.80724087697747], [22.389502018566052, 8.014162759357506], [-3.7972034016092366, -7.181298777400349], [-26.459477768546606, 14.934207736415651], [-10.521359882437267, 6.166374010257417], [-15.359082433317996, 12.252568942262325], [10.125630016430227, -13.944095406553936], [-0.5271084694353002, 22.296814790150805], [19.112294690694718, 9.671743448062426], [-29.36614331340189, -1.6132565609659966], [-25.523656568862688, -15.640536349598605], [-22.76461408761037, 12.003484268671544], [-14.253926567549012, 5.475403896638776], [7.477329787672417, 12.611574391126673], [-10.860571296511795, 22.191100658063302], [-3.4334517407835548, -23.076526426514786], [-18.24726066034178, -6.274105831357984], [7.909534144787051, -32.88678633945206], [-2.94968169382515, -18.64141852339837], [7.017166190394279, -29.426154043541775], [-13.432042741023416, -13.666295644214616], [13.148880935264968, -12.89208703764394], [-9.057297864741686, -8.735969778859301], [-33.15755308588702, 0.8626788351759902], [-22.726396993540487, 11.225478110232919], [12.860422209048414, 14.37247001498675], [33.28079023444879, 15.118732084013214], [-25.55334530252564, -7.010091877269528], [5.015723809859515, 8.885270264025854], [14.484029768433292, 10.786072577401042], [10.314697185081663, -23.9539350026607], [-11.70956561484766, -21.95183689489829], [-0.3113854775634885, 23.299163815403052], [14.256222072502494, -15.442205332287026], [10.894981195079424, 28.66838736679244], [-8.594130251393018, -11.24639613726733], [2.7915920223041466, 28.944471834469624], [-24.475926813414823, -12.238868664847915], [-6.7067535876919075, 30.801243562814715], [-18.26695415828276, 22.31189509868388], [-9.058282458578912, -8.901397971113056], [-3.9983000679202725, 22.852119248468355], [1.8522099200067985, -19.599624510666878], [-3.7709837091219, -6.944183618528032], [3.734297959569019, 21.95171418898427], [11.07182733707543, 27.840617394125882], [0.23312446377015592, 14.48636763593596], [12.264573177077528, -23.913006433720575], [-5.626403900560809, -8.207456668608625], [-28.562324817978137, 11.698679294857584]]}, \"id\": \"el23682140175246715216\"});\n",
+        "            })\n",
+        "         });\n",
+        "}\n",
+        "</script>"
+       ],
+       "metadata": {},
+       "output_type": "display_data",
+       "png": "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\nQmCC\n",
+       "text": [
+        "<matplotlib.figure.Figure at 0x7f7d17c96950>"
+       ]
+      }
+     ],
+     "prompt_number": 11
+    }
+   ],
+   "metadata": {}
+  }
+ ]
+}
\ No newline at end of file
diff --git a/examples/language_model/train_lm.sh b/examples/language_model/train_lm.sh
new file mode 100755
index 0000000..d714878
--- /dev/null
+++ b/examples/language_model/train_lm.sh
@@ -0,0 +1,5 @@
+#!/usr/bin/env sh
+
+TOOLS=./build/tools
+
+$TOOLS/caffe train --solver=examples/language_model/solver.prototxt
diff --git a/include/caffe/common_layers.hpp b/include/caffe/common_layers.hpp
index b1ac3a9..aff74c4 100644
--- a/include/caffe/common_layers.hpp
+++ b/include/caffe/common_layers.hpp
@@ -137,10 +137,13 @@ class ConcatLayer : public Layer<Dtype> {
   virtual void Backward_gpu(const vector<Blob<Dtype>*>& top,
       const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom);
 
+  Blob<Dtype> col_bob_;
+  Blob<Dtype> top_buffer_;
   int count_;
   int num_concats_;
   int concat_input_size_;
   int concat_axis_;
+  bool fast_lstm_concat_;
 };
 
 /**
@@ -456,6 +459,7 @@ class SliceLayer : public Layer<Dtype> {
   int num_slices_;
   int slice_size_;
   int slice_axis_;
+  bool fast_wordvec_slice_;
   vector<int> slice_point_;
 };
 
diff --git a/include/caffe/net.hpp b/include/caffe/net.hpp
index 075afeb..53cdba6 100644
--- a/include/caffe/net.hpp
+++ b/include/caffe/net.hpp
@@ -237,9 +237,12 @@ class Net {
   vector<Dtype> blob_loss_weights_;
   vector<vector<int> > param_id_vecs_;
   vector<int> param_owners_;
+  vector<bool> shared_param_owners_;
   vector<string> param_display_names_;
   vector<pair<int, int> > param_layer_indices_;
   map<string, int> param_names_index_;
+  /// map of param owners id to master_diff id
+  map<int, int> master_diffs_index_;
   /// blob indices for the input and the output of the net
   vector<int> net_input_blob_indices_;
   vector<int> net_output_blob_indices_;
@@ -247,6 +250,8 @@ class Net {
   vector<Blob<Dtype>*> net_output_blobs_;
   /// The parameters in the network.
   vector<shared_ptr<Blob<Dtype> > > params_;
+  /// The master diffs for shared parameters
+  vector<shared_ptr<Blob<Dtype> > > master_diffs_;
   /// the learning rate multipliers
   vector<float> params_lr_;
   /// the weight decay multipliers
diff --git a/include/caffe/test/test_gradient_check_util.hpp b/include/caffe/test/test_gradient_check_util.hpp
index 2293771..fad2e28 100644
--- a/include/caffe/test/test_gradient_check_util.hpp
+++ b/include/caffe/test/test_gradient_check_util.hpp
@@ -86,7 +86,8 @@ void GradientChecker<Dtype>::CheckGradientSingle(Layer<Dtype>* layer,
   for (int i = 0; i < layer->blobs().size(); ++i) {
     blobs_to_check.push_back(layer->blobs()[i].get());
   }
-  if (check_bottom < 0) {
+  if (check_bottom == -2) {
+  } else if (check_bottom < 0) {
     for (int i = 0; i < bottom.size(); ++i) {
       blobs_to_check.push_back(bottom[i]);
     }
diff --git a/include/caffe/util/math_functions.hpp b/include/caffe/util/math_functions.hpp
index f43036f..c13f8ea 100644
--- a/include/caffe/util/math_functions.hpp
+++ b/include/caffe/util/math_functions.hpp
@@ -14,6 +14,9 @@ namespace caffe {
 
 // Caffe gemm provides a simpler interface to the gemm functions, with the
 // limitation that the data has to be contiguous in memory.
+template<typename Dtype>
+void caffe_gpu_transpose(const int M, const int N, const Dtype* A, Dtype* C);
+
 template <typename Dtype>
 void caffe_cpu_gemm(const CBLAS_TRANSPOSE TransA,
     const CBLAS_TRANSPOSE TransB, const int M, const int N, const int K,
diff --git a/include/caffe/vision_layers.hpp b/include/caffe/vision_layers.hpp
index 6cb507a..940c7a0 100644
--- a/include/caffe/vision_layers.hpp
+++ b/include/caffe/vision_layers.hpp
@@ -451,6 +451,67 @@ class CuDNNPoolingLayer : public PoolingLayer<Dtype> {
 };
 #endif
 
+template <typename Dtype>
+class LstmLayer : public Layer<Dtype> {
+ public:
+  explicit LstmLayer(const LayerParameter& param)
+      : Layer<Dtype>(param) {}
+  virtual void LayerSetUp(const vector<Blob<Dtype>*>& bottom,
+      const vector<Blob<Dtype>*>& top);
+  virtual void Reshape(const vector<Blob<Dtype>*>& bottom,
+      const vector<Blob<Dtype>*>& top);
+
+  virtual inline const char* type() const { return "Lstm"; }
+ protected:
+  virtual void Forward_cpu(const vector<Blob<Dtype>*>& bottom,
+      const vector<Blob<Dtype>*>& top);
+  virtual void Forward_gpu(const vector<Blob<Dtype>*>& bottom,
+      const vector<Blob<Dtype>*>& top);
+  virtual void Backward_cpu(const vector<Blob<Dtype>*>& top,
+      const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom);
+  virtual void Backward_gpu(const vector<Blob<Dtype>*>& top,
+      const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom);
+
+  int channels_;  // num memory cells;
+  int num_;  // batch size;
+  int input_data_size_;
+  int M_;
+  int N_;
+  int K_;
+  Blob<Dtype> gates_data_buffer_;
+  Blob<Dtype> gates_diff_buffer_;
+  Blob<Dtype> next_state_tot_diff_buffer_;
+  Blob<Dtype> dldg_buffer_;
+};
+
+
+template <typename Dtype>
+class WordvecLayer : public Layer<Dtype> {
+ public:
+  explicit WordvecLayer(const LayerParameter& param)
+      : Layer<Dtype>(param) {}
+  virtual void LayerSetUp(const vector<Blob<Dtype>*>& bottom,
+      const vector<Blob<Dtype>*>& top);
+  virtual void Reshape(const vector<Blob<Dtype>*>& bottom,
+      const vector<Blob<Dtype>*>& top);
+
+  virtual inline const char* type() const { return "Wordvec"; }
+ protected:
+  virtual void Forward_cpu(const vector<Blob<Dtype>*>& bottom,
+      const vector<Blob<Dtype>*>& top);
+  virtual void Forward_gpu(const vector<Blob<Dtype>*>& bottom,
+      const vector<Blob<Dtype>*>& top);
+  virtual void Backward_cpu(const vector<Blob<Dtype>*>& top,
+      const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom);
+  virtual void Backward_gpu(const vector<Blob<Dtype>*>& top,
+      const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom);
+
+  int num_;  // batch size;
+  int vocab_size_;
+  int dimension_;
+  int sentence_length_;
+};
+
 }  // namespace caffe
 
 #endif  // CAFFE_VISION_LAYERS_HPP_
diff --git a/python/caffe/classifier.py b/python/caffe/classifier.py
index 49f8003..09293b4 100644
--- a/python/caffe/classifier.py
+++ b/python/caffe/classifier.py
@@ -91,3 +91,6 @@ class Classifier(caffe.Net):
             predictions = predictions.mean(1)
 
         return predictions
+ 
+    def rff(self, inputs):
+        out = self.forward_all(**{self.inputs[0]: inputs})
diff --git a/src/caffe/layers/concat_layer.cpp b/src/caffe/layers/concat_layer.cpp
index 1cac8fc..35e152c 100644
--- a/src/caffe/layers/concat_layer.cpp
+++ b/src/caffe/layers/concat_layer.cpp
@@ -12,6 +12,7 @@ void ConcatLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,
   const ConcatParameter& concat_param = this->layer_param_.concat_param();
   CHECK(!(concat_param.has_axis() && concat_param.has_concat_dim()))
       << "Either axis or concat_dim should be specified; not both.";
+  fast_lstm_concat_ = this->layer_param_.concat_param().fast_lstm_concat();
 }
 
 template <typename Dtype>
@@ -47,6 +48,12 @@ void ConcatLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,
     top_shape[concat_axis_] += bottom[i]->shape(concat_axis_);
   }
   top[0]->Reshape(top_shape);
+  if (fast_lstm_concat_) {
+    top_buffer_.Reshape( top[0]->num(),
+        top[0]->channels(),
+        top[0]->height(),
+        top[0]->width());
+  }
   CHECK_EQ(bottom_count_sum, top[0]->count());
 }
 
diff --git a/src/caffe/layers/concat_layer.cu b/src/caffe/layers/concat_layer.cu
index dbadb5a..2f16ece 100644
--- a/src/caffe/layers/concat_layer.cu
+++ b/src/caffe/layers/concat_layer.cu
@@ -10,18 +10,38 @@ template <typename Dtype>
 void ConcatLayer<Dtype>::Forward_gpu(const vector<Blob<Dtype>*>& bottom,
       const vector<Blob<Dtype>*>& top) {
   Dtype* top_data = top[0]->mutable_gpu_data();
-  int offset_concat_axis = 0;
-  const int top_concat_axis = top[0]->shape(concat_axis_);
-  for (int i = 0; i < bottom.size(); ++i) {
-    const Dtype* bottom_data = bottom[i]->gpu_data();
-    const int bottom_concat_axis = bottom[i]->shape(concat_axis_);
-    for (int n = 0; n < num_concats_; ++n) {
-      caffe_copy(bottom_concat_axis * concat_input_size_,
-          bottom_data + n * bottom_concat_axis * concat_input_size_,
-          top_data + (n * top_concat_axis + offset_concat_axis)
-              * concat_input_size_);
+  if (fast_lstm_concat_) {
+    int height_ = top[0]->height();
+    int num_ = top[0]->num();
+    int channels_ = top[0]->channels();
+    int width_ = top[0]->width();
+    CHECK_EQ(concat_axis_, 1) << "Lstm concat must be along channel dimension.";
+    int offset_channel = 0;
+    Dtype* top_buffer_data = top_buffer_.mutable_gpu_data();
+    for (int i = 0; i < bottom.size(); ++i) {
+      const Dtype* bottom_data = bottom[i]->gpu_data();
+      int num_elem =
+        bottom[i]->channels() * height_ * width_;
+      int top_offset = num_ * height_ * width_ * offset_channel;
+      caffe_gpu_transpose(num_, num_elem, bottom_data, top_buffer_data + top_offset);
+      offset_channel += bottom[i]->channels();
+    }
+    int total_num_elem = height_ * width_ * offset_channel;
+    caffe_gpu_transpose(total_num_elem, num_, top_buffer_data, top_data);
+  } else {
+    int offset_concat_axis = 0;
+    const int top_concat_axis = top[0]->shape(concat_axis_);
+    for (int i = 0; i < bottom.size(); ++i) {
+      const Dtype* bottom_data = bottom[i]->gpu_data();
+      const int bottom_concat_axis = bottom[i]->shape(concat_axis_);
+      for (int n = 0; n < num_concats_; ++n) {
+        caffe_copy(bottom_concat_axis * concat_input_size_,
+            bottom_data + n * bottom_concat_axis * concat_input_size_,
+            top_data + (n * top_concat_axis + offset_concat_axis)
+                * concat_input_size_);
+      }
+      offset_concat_axis += bottom_concat_axis;
     }
-    offset_concat_axis += bottom_concat_axis;
   }
 }
 
@@ -29,18 +49,39 @@ template <typename Dtype>
 void ConcatLayer<Dtype>::Backward_gpu(const vector<Blob<Dtype>*>& top,
       const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom) {
   const Dtype* top_diff = top[0]->gpu_diff();
-  int offset_concat_axis = 0;
-  const int top_concat_axis = top[0]->shape(concat_axis_);
-  for (int i = 0; i < bottom.size(); ++i) {
-    if (!propagate_down[i]) { continue; }
-    Dtype* bottom_diff = bottom[i]->mutable_gpu_diff();
-    const int bottom_concat_axis = bottom[i]->shape(concat_axis_);
-    for (int n = 0; n < num_concats_; ++n) {
-      caffe_copy(bottom_concat_axis * concat_input_size_, top_diff +
-          (n * top_concat_axis + offset_concat_axis) * concat_input_size_,
-          bottom_diff + n * bottom_concat_axis * concat_input_size_);
+  if (fast_lstm_concat_) {
+    int height_ = top[0]->height();
+    int num_ = top[0]->num();
+    int channels_ = top[0]->channels();
+    int width_ = top[0]->width();
+    CHECK_EQ(concat_axis_, 1) << "Lstm concat must be along channel dimension.";
+    int offset_channel = 0;
+    Dtype* top_buffer_diff = top_buffer_.mutable_gpu_diff();
+    int total_num_elem = height_ * width_ * channels_;
+    caffe_gpu_transpose(num_, total_num_elem, top_diff, top_buffer_diff);
+    for (int i = 0; i < bottom.size(); ++i) {
+      if (propagate_down[i]) {
+        Dtype* bottom_diff = bottom[i]->mutable_gpu_diff();
+        int top_offset = num_ * height_ * width_ * offset_channel;
+        int num_elem = bottom[i]->channels() * height_ * width_;
+        caffe_gpu_transpose(num_elem, num_, top_buffer_diff + top_offset, bottom_diff);
+      }
+      offset_channel += bottom[i]->channels();
+    }
+  } else {
+    int offset_concat_axis = 0;
+    const int top_concat_axis = top[0]->shape(concat_axis_);
+    for (int i = 0; i < bottom.size(); ++i) {
+      if (!propagate_down[i]) { continue; }
+      Dtype* bottom_diff = bottom[i]->mutable_gpu_diff();
+      const int bottom_concat_axis = bottom[i]->shape(concat_axis_);
+      for (int n = 0; n < num_concats_; ++n) {
+        caffe_copy(bottom_concat_axis * concat_input_size_, top_diff +
+            (n * top_concat_axis + offset_concat_axis) * concat_input_size_,
+            bottom_diff + n * bottom_concat_axis * concat_input_size_);
+      }
+      offset_concat_axis += bottom_concat_axis;
     }
-    offset_concat_axis += bottom_concat_axis;
   }
 }
 
diff --git a/src/caffe/layers/lstm_layer.cpp b/src/caffe/layers/lstm_layer.cpp
new file mode 100644
index 0000000..6610cbb
--- /dev/null
+++ b/src/caffe/layers/lstm_layer.cpp
@@ -0,0 +1,248 @@
+#include <vector>
+#include "caffe/layer.hpp"
+#include "caffe/util/math_functions.hpp"
+#include "caffe/vision_layers.hpp"
+
+namespace caffe {
+
+template <typename Dtype>
+inline Dtype sigmoid(Dtype x) {
+  return 1. / (1. + exp(-x));
+}
+
+template <typename Dtype>
+inline Dtype sigmoid_diff(Dtype x) {
+  return x * (1. - x);
+}
+
+template <typename Dtype>
+inline Dtype tanh(Dtype x) {
+  Dtype exp2x = exp(2 * x);
+  return abs(x) < Dtype(5) ? ((exp2x - Dtype(1)) / (exp2x + Dtype(1))) : (x > 0 ? Dtype(1) : Dtype(-1));
+}
+
+template <typename Dtype>
+inline Dtype tanh_diff(Dtype x) {
+  return (1. - x * x);
+}
+
+template <typename Dtype>
+void LstmLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,
+      const vector<Blob<Dtype>*>& top) {
+  LstmParameter lstm_param = this->layer_param_.lstm_param();
+  CHECK((lstm_param.has_num_cells()))
+      << "lstm_param.has_num_cells()";
+  CHECK((lstm_param.has_input_weight_filler()))
+      << "lstm_param.has_input_weight_filler()";
+  CHECK((lstm_param.has_input_gate_weight_filler()))
+      << "lstm_param.has_input_gate_weight_filler()";
+  CHECK((lstm_param.has_forget_gate_weight_filler()))
+      << "lstm_param.has_forget_gate_weight_filler()";
+  CHECK((lstm_param.has_output_gate_weight_filler()))
+      << "lstm_param.has_output_gate_weight_filler()";
+
+  channels_ = lstm_param.num_cells();
+  input_data_size_ = (bottom[0]->channels() *
+        bottom[0]->width() *
+        bottom[0]->height());
+  num_ = bottom[0]->num();
+  M_ = num_;
+  N_ = channels_;
+  K_ = input_data_size_;
+
+  this->blobs_.resize(4);
+  for (int i = 0; i < 4; i++) {
+      this->blobs_[i].reset(new Blob<Dtype>(
+          1, channels_, 1, input_data_size_));
+  }
+
+  shared_ptr<Filler<Dtype> > input_weight_filler(GetFiller<Dtype>(
+      lstm_param.input_weight_filler()));
+  input_weight_filler->Fill(this->blobs_[0].get());
+
+  shared_ptr<Filler<Dtype> > input_gate_weight_filler(GetFiller<Dtype>(
+      lstm_param.input_gate_weight_filler()));
+  input_gate_weight_filler->Fill(this->blobs_[1].get());
+
+  shared_ptr<Filler<Dtype> > forget_gate_weight_filler(GetFiller<Dtype>(
+      lstm_param.forget_gate_weight_filler()));
+  forget_gate_weight_filler->Fill(this->blobs_[2].get());
+
+  shared_ptr<Filler<Dtype> > output_gate_weight_filler(GetFiller<Dtype>(
+      lstm_param.output_gate_weight_filler()));
+  output_gate_weight_filler->Fill(this->blobs_[3].get());
+
+  // Propagate gradients to the parameters (as directed by backward pass).
+  this->param_propagate_down_.resize(this->blobs_.size(), true);
+}
+
+template <typename Dtype>
+void LstmLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,
+      const vector<Blob<Dtype>*>& top) {
+  CHECK((this->layer_param_.bottom_size() == 2 || this->layer_param_.bottom_size() == 0))
+      << "LSTM must have a data and cell bottom";
+  CHECK((this->layer_param_.top_size() == 2 || this->layer_param_.top_size() == 0))
+      << "LSTM must have a data and cell top";
+  gates_data_buffer_.Reshape(num_, 4 * channels_, 1, 1);
+  gates_diff_buffer_.Reshape(num_, 4 * channels_, 1, 1);
+  next_state_tot_diff_buffer_.Reshape(num_, channels_, 1, 1);
+  dldg_buffer_.Reshape(num_, channels_, 1, 1);
+  top[0]->Reshape(num_, channels_, 1, 1);
+  top[1]->Reshape(num_, channels_, 1, 1);
+}
+
+template <typename Dtype>
+void LstmLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,
+      const vector<Blob<Dtype>*>& top) {
+  const Dtype* input_data = bottom[0]->cpu_data();
+  const Dtype* prev_state_data = bottom[1]->cpu_data();
+
+  const Dtype* input_weight = this->blobs_[0]->cpu_data();
+  const Dtype* input_gate_weight = this->blobs_[1]->cpu_data();
+  const Dtype* forget_gate_weight = this->blobs_[2]->cpu_data();
+  const Dtype* output_gate_weight = this->blobs_[3]->cpu_data();
+
+  Dtype* next_hidden_state = top[0]->mutable_cpu_data();
+  Dtype* next_memory_state = top[1]->mutable_cpu_data();
+
+  Dtype* gates_data = gates_data_buffer_.mutable_cpu_data();
+
+  Dtype* input_gates = gates_data + channels_ * num_ * 0;
+  Dtype* forget_gates = gates_data + channels_ * num_ * 1;
+  Dtype* output_gates = gates_data + channels_ * num_ * 2;
+  Dtype* input_values = gates_data + channels_ * num_ * 3;
+
+  caffe_cpu_gemm<Dtype>(CblasNoTrans, CblasTrans, M_, N_, K_,
+    (Dtype)1., input_data, input_weight,
+    (Dtype)0., input_values);
+  caffe_cpu_gemm<Dtype>(CblasNoTrans, CblasTrans, M_, N_, K_,
+    (Dtype)1., input_data, input_gate_weight,
+    (Dtype)0., input_gates);
+  caffe_cpu_gemm<Dtype>(CblasNoTrans, CblasTrans, M_, N_, K_,
+    (Dtype)1., input_data, forget_gate_weight,
+    (Dtype)0., forget_gates);
+  caffe_cpu_gemm<Dtype>(CblasNoTrans, CblasTrans, M_, N_, K_,
+    (Dtype)1., input_data, output_gate_weight,
+    (Dtype)0., output_gates);
+
+  for (int n = 0; n < num_; ++n) {
+    for (int i = 0; i < channels_; ++i) {
+      const int idx = i + n * channels_;
+      input_gates[idx] = sigmoid(input_gates[idx]);
+      forget_gates[idx] = sigmoid(forget_gates[idx]);
+      output_gates[idx] = sigmoid(output_gates[idx]);
+      input_values[idx] = tanh(input_values[idx]);
+
+      next_memory_state[idx] = prev_state_data[idx] * forget_gates[idx] +
+          input_gates[idx] * input_values[idx];
+      next_hidden_state[idx] = next_memory_state[idx] * output_gates[idx];
+    }
+  }
+}
+
+template <typename Dtype>
+void LstmLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,
+      const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom) {
+  for (int i = 0; i < 2; ++i) {
+    caffe_set(bottom[i]->count(), Dtype(0), bottom[i]->mutable_cpu_diff());
+  }
+  for (int i = 0; i < 4; ++i) {
+    caffe_set(this->blobs_[i]->count(), Dtype(0), this->blobs_[i]->mutable_cpu_diff());
+  }
+
+  const Dtype* input_data = bottom[0]->cpu_data();
+  const Dtype* prev_state_data = bottom[1]->cpu_data();
+
+  const Dtype* input_weight = this->blobs_[0]->cpu_data();
+  const Dtype* input_gate_weight = this->blobs_[1]->cpu_data();
+  const Dtype* forget_gate_weight = this->blobs_[2]->cpu_data();
+  const Dtype* output_gate_weight = this->blobs_[3]->cpu_data();
+
+  const Dtype* gates_data = gates_data_buffer_.mutable_cpu_data();
+  Dtype* gates_diff = gates_diff_buffer_.mutable_cpu_data();
+
+  const Dtype* input_gates = gates_data + channels_ * num_ * 0;
+  const Dtype* forget_gates = gates_data + channels_ * num_ * 1;
+  const Dtype* output_gates = gates_data + channels_ * num_ * 2;
+  const Dtype* input_values = gates_data + channels_ * num_ * 3;
+
+  Dtype* input_gates_diff = gates_diff + channels_ * num_ * 0;
+  Dtype* forget_gates_diff = gates_diff + channels_ * num_ * 1;
+  Dtype* output_gates_diff = gates_diff + channels_ * num_ * 2;
+  Dtype* input_values_diff = gates_diff + channels_ * num_ * 3;
+
+  for (int n = 0; n < num_; ++n) {
+    for (int i = 0; i < channels_; ++i) {
+      const int idx = i + n * channels_;
+      input_gates_diff[idx] = sigmoid_diff(input_gates[idx]);
+      forget_gates_diff[idx] = sigmoid_diff(forget_gates[idx]);
+      output_gates_diff[idx] = sigmoid_diff(output_gates[idx]);
+      input_values_diff[idx] = tanh_diff(input_values[idx]);
+    }
+  }
+
+  Dtype* input_weight_diff = this->blobs_[0]->mutable_cpu_diff();
+  Dtype* input_gate_weight_diff = this->blobs_[1]->mutable_cpu_diff();
+  Dtype* forget_gate_weight_diff = this->blobs_[2]->mutable_cpu_diff();
+  Dtype* output_gate_weight_diff = this->blobs_[3]->mutable_cpu_diff();
+
+  Dtype* input_diff = bottom[0]->mutable_cpu_diff();
+  Dtype* prev_state_diff = bottom[1]->mutable_cpu_diff();
+
+  const Dtype* next_hidden_state_diff = top[0]->cpu_diff();
+  const Dtype* next_memory_state = top[1]->cpu_data();
+  const Dtype* next_memory_state_diff = top[1]->cpu_diff();
+
+  Dtype* next_state_tot_diff = next_state_tot_diff_buffer_.mutable_cpu_data();
+  caffe_mul(num_ * channels_, output_gates, next_hidden_state_diff, next_state_tot_diff);
+  caffe_add(num_ * channels_, next_memory_state_diff, next_state_tot_diff, next_state_tot_diff);
+
+  caffe_mul(num_ * channels_, next_state_tot_diff, forget_gates, prev_state_diff);
+
+  Dtype* dldg_data = dldg_buffer_.mutable_cpu_data();
+
+  caffe_mul(num_ * channels_, input_gates, input_values_diff, dldg_data);
+  caffe_mul(num_ * channels_, next_state_tot_diff, dldg_data, dldg_data);
+  caffe_cpu_gemm<Dtype>(CblasTrans, CblasNoTrans, channels_, input_data_size_, num_,
+    (Dtype)1., dldg_data, input_data,
+    (Dtype)0., input_weight_diff);
+  caffe_cpu_gemm<Dtype>(CblasNoTrans, CblasNoTrans, num_, input_data_size_, channels_,
+    (Dtype)1., dldg_data, input_weight,
+    (Dtype)1., input_diff);
+
+  caffe_mul(num_ * channels_, input_gates_diff, input_values, dldg_data);
+  caffe_mul(num_ * channels_, next_state_tot_diff, dldg_data, dldg_data);
+  caffe_cpu_gemm<Dtype>(CblasTrans, CblasNoTrans, channels_, input_data_size_, num_,
+    (Dtype)1., dldg_data, input_data,
+    (Dtype)0., input_gate_weight_diff);
+  caffe_cpu_gemm<Dtype>(CblasNoTrans, CblasNoTrans, num_, input_data_size_, channels_,
+    (Dtype)1., dldg_data, input_gate_weight,
+    (Dtype)1., input_diff);
+
+  caffe_mul(num_ * channels_, forget_gates_diff, prev_state_data, dldg_data);
+  caffe_mul(num_ * channels_, next_state_tot_diff, dldg_data, dldg_data);
+  caffe_cpu_gemm<Dtype>(CblasTrans, CblasNoTrans, channels_, input_data_size_, num_,
+    (Dtype)1., dldg_data, input_data,
+    (Dtype)0., forget_gate_weight_diff);
+  caffe_cpu_gemm<Dtype>(CblasNoTrans, CblasNoTrans, num_, input_data_size_, channels_,
+    (Dtype)1., dldg_data, forget_gate_weight,
+    (Dtype)1., input_diff);
+
+  caffe_mul(num_ * channels_, output_gates_diff, next_memory_state, dldg_data);
+  caffe_mul(num_ * channels_, next_hidden_state_diff, dldg_data, dldg_data);
+  caffe_cpu_gemm<Dtype>(CblasTrans, CblasNoTrans, channels_, input_data_size_, num_,
+    (Dtype)1., dldg_data, input_data,
+    (Dtype)0., output_gate_weight_diff);
+  caffe_cpu_gemm<Dtype>(CblasNoTrans, CblasNoTrans, num_, input_data_size_, channels_,
+    (Dtype)1., dldg_data, output_gate_weight,
+    (Dtype)1., input_diff);
+}
+
+#ifdef CPU_ONLY
+STUB_GPU(LstmLayer);
+#endif
+
+INSTANTIATE_CLASS(LstmLayer);
+REGISTER_LAYER_CLASS(Lstm);
+
+}  // namespace caffe
diff --git a/src/caffe/layers/lstm_layer.cu b/src/caffe/layers/lstm_layer.cu
new file mode 100644
index 0000000..ee9db96
--- /dev/null
+++ b/src/caffe/layers/lstm_layer.cu
@@ -0,0 +1,227 @@
+#include <vector>
+#include "caffe/layer.hpp"
+#include "caffe/util/math_functions.hpp"
+#include "caffe/vision_layers.hpp"
+
+namespace caffe {
+
+template <typename Dtype>
+__device__ Dtype cuda_sigmoid(Dtype x) {
+  return 1. / (1. + exp(-x));
+}
+
+template <typename Dtype>
+__device__ Dtype cuda_sigmoid_diff(Dtype x) {
+  return x * (1. - x);
+}
+
+template <typename Dtype>
+__device__ Dtype cuda_tanh(Dtype x) {
+  Dtype exp2x = exp(2 * x);
+  return abs(x) < Dtype(5) ? ((exp2x - Dtype(1)) / (exp2x + Dtype(1))) : (x > 0 ? Dtype(1) : Dtype(-1));
+}
+
+template <typename Dtype>
+__device__ Dtype cuda_tanh_diff(Dtype x) {
+  return (1. - x * x);
+}
+
+template <typename Dtype>
+__global__ void ForwardCombineGates(
+  int n,
+  const Dtype* prev_state_data,
+  Dtype* input_gates,
+  Dtype* forget_gates,
+  Dtype* output_gates,
+  Dtype* input_values,
+  Dtype* next_memory_state,
+  Dtype* next_hidden_state)
+{
+  CUDA_KERNEL_LOOP(idx, n) {
+    input_gates[idx] = cuda_sigmoid(input_gates[idx]);
+    forget_gates[idx] = cuda_sigmoid(forget_gates[idx]);
+    output_gates[idx] = cuda_sigmoid(output_gates[idx]);
+    input_values[idx] = cuda_tanh(input_values[idx]);
+
+    next_memory_state[idx] = prev_state_data[idx] * forget_gates[idx] +
+        input_gates[idx] * input_values[idx];
+    next_hidden_state[idx] = next_memory_state[idx] * output_gates[idx];
+  }
+}
+
+template <typename Dtype>
+__global__ void BackwardGates(
+  int n,
+  const Dtype* input_gates,
+  const Dtype* forget_gates,
+  const Dtype* output_gates,
+  const Dtype* input_values,
+  Dtype* input_gates_diff,
+  Dtype* forget_gates_diff,
+  Dtype* output_gates_diff,
+  Dtype* input_values_diff)
+{
+  CUDA_KERNEL_LOOP(idx, n) {
+    input_gates_diff[idx] = cuda_sigmoid_diff(input_gates[idx]);
+    forget_gates_diff[idx] = cuda_sigmoid_diff(forget_gates[idx]);
+    output_gates_diff[idx] = cuda_sigmoid_diff(output_gates[idx]);
+    input_values_diff[idx] = cuda_tanh_diff(input_values[idx]);
+  }
+}
+
+template <typename Dtype>
+void LstmLayer<Dtype>::Forward_gpu(const vector<Blob<Dtype>*>& bottom,
+      const vector<Blob<Dtype>*>& top) {
+  const Dtype* input_data = bottom[0]->gpu_data();
+  const Dtype* prev_state_data = bottom[1]->gpu_data();
+
+  const Dtype* input_weight = this->blobs_[0]->gpu_data();
+  const Dtype* input_gate_weight = this->blobs_[1]->gpu_data();
+  const Dtype* forget_gate_weight = this->blobs_[2]->gpu_data();
+  const Dtype* output_gate_weight = this->blobs_[3]->gpu_data();
+
+  Dtype* next_hidden_state = top[0]->mutable_gpu_data();
+  Dtype* next_memory_state = top[1]->mutable_gpu_data();
+
+  Dtype* gates_data = gates_data_buffer_.mutable_gpu_data();
+
+  Dtype* input_gates = gates_data + channels_ * num_ * 0;
+  Dtype* forget_gates = gates_data + channels_ * num_ * 1;
+  Dtype* output_gates = gates_data + channels_ * num_ * 2;
+  Dtype* input_values = gates_data + channels_ * num_ * 3;
+
+  caffe_gpu_gemm<Dtype>(CblasNoTrans, CblasTrans, M_, N_, K_,
+    (Dtype)1., input_data, input_weight,
+    (Dtype)0., input_values);
+  caffe_gpu_gemm<Dtype>(CblasNoTrans, CblasTrans, M_, N_, K_,
+    (Dtype)1., input_data, input_gate_weight,
+    (Dtype)0., input_gates);
+  caffe_gpu_gemm<Dtype>(CblasNoTrans, CblasTrans, M_, N_, K_,
+    (Dtype)1., input_data, forget_gate_weight,
+    (Dtype)0., forget_gates);
+  caffe_gpu_gemm<Dtype>(CblasNoTrans, CblasTrans, M_, N_, K_,
+    (Dtype)1., input_data, output_gate_weight,
+    (Dtype)0., output_gates);
+
+  caffe_gpu_set(channels_ * num_, Dtype(0), forget_gates);
+  caffe_gpu_sub(channels_ * num_, forget_gates, output_gates, forget_gates);
+
+  const int count = num_ * channels_;
+  ForwardCombineGates<Dtype><<<CAFFE_GET_BLOCKS(count), CAFFE_CUDA_NUM_THREADS>>>(
+      count,
+      prev_state_data,
+      input_gates,
+      forget_gates,
+      output_gates,
+      input_values,
+      next_memory_state,
+      next_hidden_state);
+
+  CUDA_POST_KERNEL_CHECK;
+}
+
+template <typename Dtype>
+void LstmLayer<Dtype>::Backward_gpu(const vector<Blob<Dtype>*>& top,
+      const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom) {
+  for (int i = 0; i < 2; ++i) {
+    caffe_gpu_set(bottom[i]->count(), Dtype(0), bottom[i]->mutable_gpu_diff());
+  }
+  for (int i = 0; i < 4; ++i) {
+    caffe_gpu_set(this->blobs_[i]->count(), Dtype(0), this->blobs_[i]->mutable_gpu_diff());
+  }
+
+  const Dtype* input_data = bottom[0]->gpu_data();
+  const Dtype* prev_state_data = bottom[1]->gpu_data();
+
+  const Dtype* input_weight = this->blobs_[0]->gpu_data();
+  const Dtype* input_gate_weight = this->blobs_[1]->gpu_data();
+  const Dtype* forget_gate_weight = this->blobs_[2]->gpu_data();
+  const Dtype* output_gate_weight = this->blobs_[3]->gpu_data();
+
+  const Dtype* gates_data = gates_data_buffer_.mutable_gpu_data();
+  Dtype* gates_diff = gates_diff_buffer_.mutable_gpu_data();
+
+  const Dtype* input_gates = gates_data + channels_ * num_ * 0;
+  const Dtype* forget_gates = gates_data + channels_ * num_ * 1;
+  const Dtype* output_gates = gates_data + channels_ * num_ * 2;
+  const Dtype* input_values = gates_data + channels_ * num_ * 3;
+
+  Dtype* input_gates_diff = gates_diff + channels_ * num_ * 0;
+  Dtype* forget_gates_diff = gates_diff + channels_ * num_ * 1;
+  Dtype* output_gates_diff = gates_diff + channels_ * num_ * 2;
+  Dtype* input_values_diff = gates_diff + channels_ * num_ * 3;
+
+  const int count = num_ * channels_;
+  BackwardGates<Dtype><<<CAFFE_GET_BLOCKS(count), CAFFE_CUDA_NUM_THREADS>>>(
+    count,
+    input_gates,
+    forget_gates,
+    output_gates,
+    input_values,
+    input_gates_diff,
+    forget_gates_diff,
+    output_gates_diff,
+    input_values_diff);
+
+  CUDA_POST_KERNEL_CHECK;
+
+  Dtype* input_weight_diff = this->blobs_[0]->mutable_gpu_diff();
+  Dtype* input_gate_weight_diff = this->blobs_[1]->mutable_gpu_diff();
+  Dtype* forget_gate_weight_diff = this->blobs_[2]->mutable_gpu_diff();
+  Dtype* output_gate_weight_diff = this->blobs_[3]->mutable_gpu_diff();
+
+  Dtype* input_diff = bottom[0]->mutable_gpu_diff();
+  Dtype* prev_state_diff = bottom[1]->mutable_gpu_diff();
+
+  const Dtype* next_hidden_state_diff = top[0]->gpu_diff();
+  const Dtype* next_memory_state = top[1]->gpu_data();
+  const Dtype* next_memory_state_diff = top[1]->gpu_diff();
+
+  Dtype* next_state_tot_diff = next_state_tot_diff_buffer_.mutable_gpu_data();
+  caffe_gpu_mul(num_ * channels_, output_gates, next_hidden_state_diff, next_state_tot_diff);
+  caffe_gpu_add(num_ * channels_, next_memory_state_diff, next_state_tot_diff, next_state_tot_diff);
+
+  caffe_gpu_mul(num_ * channels_, next_state_tot_diff, forget_gates, prev_state_diff);
+
+  Dtype* dldg_data = dldg_buffer_.mutable_gpu_data();
+
+  caffe_gpu_mul(num_ * channels_, input_gates, input_values_diff, dldg_data);
+  caffe_gpu_mul(num_ * channels_, next_state_tot_diff, dldg_data, dldg_data);
+  caffe_gpu_gemm<Dtype>(CblasTrans, CblasNoTrans, channels_, input_data_size_, num_,
+    (Dtype)1., dldg_data, input_data,
+    (Dtype)0., input_weight_diff);
+  caffe_gpu_gemm<Dtype>(CblasNoTrans, CblasNoTrans, num_, input_data_size_, channels_,
+    (Dtype)1., dldg_data, input_weight,
+    (Dtype)1., input_diff);
+
+  caffe_gpu_mul(num_ * channels_, input_gates_diff, input_values, dldg_data);
+  caffe_gpu_mul(num_ * channels_, next_state_tot_diff, dldg_data, dldg_data);
+  caffe_gpu_gemm<Dtype>(CblasTrans, CblasNoTrans, channels_, input_data_size_, num_,
+    (Dtype)1., dldg_data, input_data,
+    (Dtype)0., input_gate_weight_diff);
+  caffe_gpu_gemm<Dtype>(CblasNoTrans, CblasNoTrans, num_, input_data_size_, channels_,
+    (Dtype)1., dldg_data, input_gate_weight,
+    (Dtype)1., input_diff);
+
+  caffe_gpu_mul(num_ * channels_, forget_gates_diff, prev_state_data, dldg_data);
+  caffe_gpu_mul(num_ * channels_, next_state_tot_diff, dldg_data, dldg_data);
+  caffe_gpu_gemm<Dtype>(CblasTrans, CblasNoTrans, channels_, input_data_size_, num_,
+    (Dtype)-1., dldg_data, input_data,
+    (Dtype)1., output_gate_weight_diff);
+  caffe_gpu_gemm<Dtype>(CblasNoTrans, CblasNoTrans, num_, input_data_size_, channels_,
+    (Dtype)-1., dldg_data, output_gate_weight,
+    (Dtype)1., input_diff);
+
+  caffe_gpu_mul(num_ * channels_, output_gates_diff, next_memory_state, dldg_data);
+  caffe_gpu_mul(num_ * channels_, next_hidden_state_diff, dldg_data, dldg_data);
+  caffe_gpu_gemm<Dtype>(CblasTrans, CblasNoTrans, channels_, input_data_size_, num_,
+    (Dtype)1., dldg_data, input_data,
+    (Dtype)1., output_gate_weight_diff);
+  caffe_gpu_gemm<Dtype>(CblasNoTrans, CblasNoTrans, num_, input_data_size_, channels_,
+    (Dtype)1., dldg_data, output_gate_weight,
+    (Dtype)1., input_diff);
+}
+
+INSTANTIATE_LAYER_GPU_FUNCS(LstmLayer);
+
+}  // namespace caffe
diff --git a/src/caffe/layers/slice_layer.cpp b/src/caffe/layers/slice_layer.cpp
index e4418c9..5ec5df4 100644
--- a/src/caffe/layers/slice_layer.cpp
+++ b/src/caffe/layers/slice_layer.cpp
@@ -67,25 +67,44 @@ void SliceLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,
     }
   }
   CHECK_EQ(count, bottom[0]->count());
+  fast_wordvec_slice_ = (slice_axis_ == 2 &&
+    slice_param.fast_wordvec_slice());
 }
 
 template <typename Dtype>
 void SliceLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,
       const vector<Blob<Dtype>*>& top) {
-  int offset_slice_axis = 0;
-  const Dtype* bottom_data = bottom[0]->cpu_data();
-  const int bottom_slice_axis = bottom[0]->shape(slice_axis_);
-  for (int i = 0; i < top.size(); ++i) {
-    Dtype* top_data = top[i]->mutable_cpu_data();
-    const int top_slice_axis = top[i]->shape(slice_axis_);
-    for (int n = 0; n < num_slices_; ++n) {
-      const int top_offset = n * top_slice_axis * slice_size_;
-      const int bottom_offset =
-          (n * bottom_slice_axis + offset_slice_axis) * slice_size_;
-      caffe_copy(top_slice_axis * slice_size_,
-          bottom_data + bottom_offset, top_data + top_offset);
+  if (fast_wordvec_slice_) {
+    CHECK_EQ(bottom[0]->width(), 1);
+    const int top_size = top.size();
+    const Dtype* bottom_data = bottom[0]->cpu_data();
+    for (int i = 0; i < top_size; ++i) {
+      CHECK_EQ(top[i]->height(), 1);
+      Dtype* top_data = top[i]->mutable_cpu_data();
+      for (int n = 0; n < bottom[0]->num(); ++n) {
+        for (int c = 0; c < bottom[0]->channels(); ++c) {
+          // top height_ and width_ are assumed to be 1 from layer SetUp
+          const int idx = n * bottom[0]->channels() + c;
+          top_data[idx] = bottom_data[i + idx * top_size];
+        }
+      }
+    }
+  } else {
+    int offset_slice_axis = 0;
+    const Dtype* bottom_data = bottom[0]->cpu_data();
+    const int bottom_slice_axis = bottom[0]->shape(slice_axis_);
+    for (int i = 0; i < top.size(); ++i) {
+      Dtype* top_data = top[i]->mutable_cpu_data();
+      const int top_slice_axis = top[i]->shape(slice_axis_);
+      for (int n = 0; n < num_slices_; ++n) {
+        const int top_offset = n * top_slice_axis * slice_size_;
+        const int bottom_offset =
+            (n * bottom_slice_axis + offset_slice_axis) * slice_size_;
+        caffe_copy(top_slice_axis * slice_size_,
+            bottom_data + bottom_offset, top_data + top_offset);
+      }
+      offset_slice_axis += top_slice_axis;
     }
-    offset_slice_axis += top_slice_axis;
   }
 }
 
@@ -93,20 +112,35 @@ template <typename Dtype>
 void SliceLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,
       const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom) {
   if (!propagate_down[0]) { return; }
-  int offset_slice_axis = 0;
-  Dtype* bottom_diff = bottom[0]->mutable_cpu_diff();
-  const int bottom_slice_axis = bottom[0]->shape(slice_axis_);
-  for (int i = 0; i < top.size(); ++i) {
-    const Dtype* top_diff = top[i]->cpu_diff();
-    const int top_slice_axis = top[i]->shape(slice_axis_);
-    for (int n = 0; n < num_slices_; ++n) {
-      const int top_offset = n * top_slice_axis * slice_size_;
-      const int bottom_offset =
-          (n * bottom_slice_axis + offset_slice_axis) * slice_size_;
-      caffe_copy(top_slice_axis * slice_size_,
-          top_diff + top_offset, bottom_diff + bottom_offset);
+  if (fast_wordvec_slice_) {
+    const int top_size = top.size();
+    Dtype* bottom_diff = bottom[0]->mutable_cpu_diff();
+    for (int i = 0; i < top_size; ++i) {
+      const Dtype* top_diff = top[i]->cpu_diff();
+      for (int n = 0; n < bottom[0]->num(); ++n) {
+        for (int c = 0; c < bottom[0]->channels(); ++c) {
+          // top height_ and width_ are assumed to be 1 from layer SetUp
+          const int idx = n * bottom[0]->channels() + c;
+          bottom_diff[i + idx * top_size] = top_diff[idx];
+        }
+      }
+    }
+  } else {
+    int offset_slice_axis = 0;
+    Dtype* bottom_diff = bottom[0]->mutable_cpu_diff();
+    const int bottom_slice_axis = bottom[0]->shape(slice_axis_);
+    for (int i = 0; i < top.size(); ++i) {
+      const Dtype* top_diff = top[i]->cpu_diff();
+      const int top_slice_axis = top[i]->shape(slice_axis_);
+      for (int n = 0; n < num_slices_; ++n) {
+        const int top_offset = n * top_slice_axis * slice_size_;
+        const int bottom_offset =
+            (n * bottom_slice_axis + offset_slice_axis) * slice_size_;
+        caffe_copy(top_slice_axis * slice_size_,
+            top_diff + top_offset, bottom_diff + bottom_offset);
+      }
+      offset_slice_axis += top_slice_axis;
     }
-    offset_slice_axis += top_slice_axis;
   }
 }
 
diff --git a/src/caffe/layers/slice_layer.cu b/src/caffe/layers/slice_layer.cu
index e6e6567..33ebdf0 100644
--- a/src/caffe/layers/slice_layer.cu
+++ b/src/caffe/layers/slice_layer.cu
@@ -9,6 +9,10 @@ namespace caffe {
 template <typename Dtype>
 void SliceLayer<Dtype>::Forward_gpu(const vector<Blob<Dtype>*>& bottom,
       const vector<Blob<Dtype>*>& top) {
+  if (fast_wordvec_slice_) {
+    Forward_cpu(bottom, top);
+    return;
+  }
   int offset_slice_axis = 0;
   const Dtype* bottom_data = bottom[0]->gpu_data();
   const int bottom_slice_axis = bottom[0]->shape(slice_axis_);
@@ -30,6 +34,10 @@ template <typename Dtype>
 void SliceLayer<Dtype>::Backward_gpu(const vector<Blob<Dtype>*>& top,
       const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom) {
   if (!propagate_down[0]) { return; }
+  if (fast_wordvec_slice_) {
+    Backward_cpu(top, propagate_down, bottom);
+    return;
+  }
   int offset_slice_axis = 0;
   Dtype* bottom_diff = bottom[0]->mutable_gpu_diff();
   const int bottom_slice_axis = bottom[0]->shape(slice_axis_);
diff --git a/src/caffe/layers/wordvec_layer.cpp b/src/caffe/layers/wordvec_layer.cpp
new file mode 100644
index 0000000..706aa43
--- /dev/null
+++ b/src/caffe/layers/wordvec_layer.cpp
@@ -0,0 +1,90 @@
+#include <vector>
+#include "caffe/layer.hpp"
+#include "caffe/util/math_functions.hpp"
+#include "caffe/vision_layers.hpp"
+
+namespace caffe {
+
+template <typename Dtype>
+void WordvecLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,
+      const vector<Blob<Dtype>*>& top) {
+  WordvecParameter wordvec_param = this->layer_param_.wordvec_param();
+  CHECK((wordvec_param.has_dimension()))
+      << "wordvec_param.has_dimension()";
+  CHECK((wordvec_param.has_vocab_size()))
+      << "wordvec_param.has_vocab_size()";
+
+  num_ = bottom[0]->num();
+  dimension_ = wordvec_param.dimension();
+  vocab_size_ = wordvec_param.vocab_size();
+  sentence_length_ = bottom[0]->channels();
+
+  this->blobs_.resize(1);
+    this->blobs_[0].reset(new Blob<Dtype>(
+        1, vocab_size_, 1, dimension_));
+
+  shared_ptr<Filler<Dtype> > weight_filler(GetFiller<Dtype>(
+      wordvec_param.weight_filler()));
+  weight_filler->Fill(this->blobs_[0].get());
+
+  // Propagate gradients to the parameters (as directed by backward pass).
+  this->param_propagate_down_.resize(this->blobs_.size(), false);
+}
+
+template <typename Dtype>
+void WordvecLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,
+      const vector<Blob<Dtype>*>& top) {
+  CHECK((this->layer_param_.bottom_size() == 1 || this->layer_param_.bottom_size() == 0))
+      << "Wordvec must have no more than one bottom";
+  CHECK((this->layer_param_.top_size() == 1 || this->layer_param_.top_size() == 0))
+      << "Wordvec must have no more than one top";
+  top[0]->Reshape(num_, dimension_, sentence_length_, 1);
+}
+
+template <typename Dtype>
+void WordvecLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,
+      const vector<Blob<Dtype>*>& top) {
+  const Dtype* weights = this->blobs_[0]->cpu_data();
+  Dtype* bottom_data = bottom[0]->mutable_cpu_data();
+  Dtype* top_data = top[0]->mutable_cpu_data();
+
+  for (int n = 0; n < num_; ++n) {
+    for (int d = 0; d < dimension_; ++d) {
+      for (int i = 0; i < sentence_length_; ++i) {
+        const int word = static_cast<int>(bottom_data[i + n * sentence_length_]
+            + Dtype(0.5));
+        top_data[i + (d + (n * dimension_)) * sentence_length_] = weights[d + word * dimension_];
+      }
+    }
+  }
+}
+
+template <typename Dtype>
+void WordvecLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,
+      const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom) {
+  Dtype* weights_diff = this->blobs_[0]->mutable_cpu_diff();
+  const Dtype* bottom_data = bottom[0]->cpu_data();
+  const Dtype* top_diff = top[0]->cpu_diff();
+
+  caffe_set(this->blobs_[0]->count(), Dtype(0), weights_diff);
+
+  for (int n = 0; n < num_; ++n) {
+    for (int d = 0; d < dimension_; ++d) {
+      for (int i = 0; i < sentence_length_; ++i) {
+        const int word = static_cast<int>(bottom_data[i + n * sentence_length_]
+            + Dtype(0.5));
+        weights_diff[d + word * dimension_] +=
+            top_diff[i + (d + (n * dimension_)) * sentence_length_];
+      }
+    }
+  }
+}
+
+#ifdef CPU_ONLY
+STUB_GPU(WordvecLayer);
+#endif
+
+INSTANTIATE_CLASS(WordvecLayer);
+REGISTER_LAYER_CLASS(Wordvec);
+
+}  // namespace caffe
diff --git a/src/caffe/layers/wordvec_layer.cu b/src/caffe/layers/wordvec_layer.cu
new file mode 100644
index 0000000..5c93377
--- /dev/null
+++ b/src/caffe/layers/wordvec_layer.cu
@@ -0,0 +1,22 @@
+#include <vector>
+#include "caffe/layer.hpp"
+#include "caffe/util/math_functions.hpp"
+#include "caffe/vision_layers.hpp"
+
+namespace caffe {
+
+template <typename Dtype>
+void WordvecLayer<Dtype>::Forward_gpu(const vector<Blob<Dtype>*>& bottom,
+      const vector<Blob<Dtype>*>& top) {
+  Forward_cpu(bottom, top);
+}
+
+template <typename Dtype>
+void WordvecLayer<Dtype>::Backward_gpu(const vector<Blob<Dtype>*>& top,
+      const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom) {
+  Backward_cpu(top, propagate_down, bottom);
+}
+
+INSTANTIATE_LAYER_GPU_FUNCS(WordvecLayer);
+
+}  // namespace caffe
diff --git a/src/caffe/net.cpp b/src/caffe/net.cpp
index fd00b12..d238452 100644
--- a/src/caffe/net.cpp
+++ b/src/caffe/net.cpp
@@ -411,12 +411,22 @@ void Net<Dtype>::AppendParam(const NetParameter& param, const int layer_id,
     // haven't already seen.
     param_owners_.push_back(-1);
     if (param_size) {
+      shared_param_owners_.push_back(true);
       param_names_index_[param_name] = net_param_id;
+      shared_ptr<Blob<Dtype> > new_master_diff(new Blob<Dtype>());
+      new_master_diff->ReshapeLike(*params_[net_param_id]);
+      master_diffs_index_[net_param_id] = master_diffs_.size();
+      master_diffs_.push_back(new_master_diff);
+    } else {
+      shared_param_owners_.push_back(false);
+      master_diffs_index_[net_param_id] = -1;
     }
   } else {
     // Named param blob with name we've seen before: share params
     const int owner_net_param_id = param_names_index_[param_name];
+    master_diffs_index_[net_param_id] = master_diffs_index_[owner_net_param_id];
     param_owners_.push_back(owner_net_param_id);
+    shared_param_owners_.push_back(false);
     const pair<int, int>& owner_index =
         param_layer_indices_[owner_net_param_id];
     const int owner_layer_id = owner_index.first;
@@ -439,6 +449,8 @@ void Net<Dtype>::AppendParam(const NetParameter& param, const int layer_id,
     }
     layers_[layer_id]->blobs()[param_id]->ShareData(
         *layers_[owner_layer_id]->blobs()[owner_param_id]);
+    layers_[layer_id]->blobs()[param_id]->ShareDiff(
+        *layers_[owner_layer_id]->blobs()[owner_param_id]);
   }
 }
 
@@ -533,11 +545,60 @@ template <typename Dtype>
 void Net<Dtype>::BackwardFromTo(int start, int end) {
   CHECK_GE(end, 0);
   CHECK_LT(start, layers_.size());
+  int net_param_id = params_.size() - 1;
   for (int i = start; i >= end; --i) {
     if (layer_need_backward_[i]) {
       layers_[i]->Backward(
           top_vecs_[i], bottom_need_backward_[i], bottom_vecs_[i]);
       if (debug_info_) { BackwardDebugInfo(i); }
+      for (int j = layers_[i]->blobs().size() - 1; j >= 0; --j) {
+        CHECK_EQ(param_layer_indices_[net_param_id].first, i);
+        CHECK_EQ(param_layer_indices_[net_param_id].second, j);
+        const int master_id = master_diffs_index_[net_param_id];
+        if (master_id >= 0) {
+#ifdef CPU_ONLY
+          caffe_add(master_diffs_[master_id]->count(),
+              layers_[i]->blobs()[j]->cpu_diff(),
+              master_diffs_[master_id]->cpu_diff(),
+              master_diffs_[master_id]->mutable_cpu_diff());
+#else
+          caffe_gpu_add(master_diffs_[master_id]->count(),
+              layers_[i]->blobs()[j]->gpu_diff(),
+              master_diffs_[master_id]->gpu_diff(),
+              master_diffs_[master_id]->mutable_gpu_diff());
+#endif
+        }
+        net_param_id--;
+      }
+    }
+    else {
+        net_param_id = net_param_id - layers_[i]->blobs().size();
+    }
+  }
+  for (int i = params_.size() - 1; i >= 0; --i) {
+    if (!shared_param_owners_[i]) { continue; }
+    const int count = params_[i]->count();
+    Dtype* this_diff;
+    Dtype* master_diff;
+    switch (Caffe::mode()) {
+    case Caffe::CPU:
+      this_diff = params_[i]->mutable_cpu_diff();
+      master_diff = master_diffs_[master_diffs_index_[i]]->mutable_cpu_diff();
+      caffe_copy(count, master_diff, this_diff);
+      caffe_set(count, Dtype(0), master_diff);
+      break;
+#ifndef CPU_ONLY
+    case Caffe::GPU:
+      this_diff = params_[i]->mutable_gpu_diff();
+      master_diff = master_diffs_[master_diffs_index_[i]]->mutable_gpu_diff();
+      caffe_copy(count, master_diff, this_diff);
+      caffe_gpu_set(count, Dtype(0), master_diff);
+      break;
+#else
+      NO_GPU;
+#endif
+    default:
+      LOG(FATAL) << "Unknown caffe mode: " << Caffe::mode();
     }
   }
 }
@@ -727,7 +788,21 @@ void Net<Dtype>::ToProto(NetParameter* param, bool write_diff) const {
     param->add_input(blob_names_[net_input_blob_indices_[i]]);
   }
   DLOG(INFO) << "Serializing " << layers_.size() << " layers";
+  int net_param_id = 0;
   for (int i = 0; i < layers_.size(); ++i) {
+    bool shared_param_layer = layers_[i]->blobs().size() ? true : false;
+    for (int j = 0; j < layers_[i]->blobs().size(); ++j) {
+      CHECK_EQ(param_layer_indices_[net_param_id].first, i);
+      CHECK_EQ(param_layer_indices_[net_param_id].second, j);
+      if (param_owners_[net_param_id] < 0 ||
+            param_owners_[net_param_id] == net_param_id) {
+        shared_param_layer = false;
+      }
+      net_param_id++;
+    }
+    if (shared_param_layer) {
+      continue;
+    }
     LayerParameter* layer_param = param->add_layer();
     for (int j = 0; j < bottom_id_vecs_[i].size(); ++j) {
       layer_param->add_bottom(blob_names_[bottom_id_vecs_[i][j]]);
@@ -741,34 +816,6 @@ void Net<Dtype>::ToProto(NetParameter* param, bool write_diff) const {
 
 template <typename Dtype>
 void Net<Dtype>::Update() {
-  // First, accumulate the diffs of any shared parameters into their owner's
-  // diff. (Assumes that the learning rate, weight decay, etc. have already been
-  // accounted for in the current diff.)
-  for (int i = 0; i < params_.size(); ++i) {
-    if (param_owners_[i] < 0) { continue; }
-    if (debug_info_) { UpdateDebugInfo(i); }
-    const int count = params_[i]->count();
-    const Dtype* this_diff;
-    Dtype* owner_diff;
-    switch (Caffe::mode()) {
-    case Caffe::CPU:
-      this_diff = params_[i]->cpu_diff();
-      owner_diff = params_[param_owners_[i]]->mutable_cpu_diff();
-      caffe_add(count, this_diff, owner_diff, owner_diff);
-      break;
-#ifndef CPU_ONLY
-    case Caffe::GPU:
-      this_diff = params_[i]->gpu_diff();
-      owner_diff = params_[param_owners_[i]]->mutable_gpu_diff();
-      caffe_gpu_add(count, this_diff, owner_diff, owner_diff);
-      break;
-#else
-      NO_GPU;
-#endif
-    default:
-      LOG(FATAL) << "Unknown caffe mode: " << Caffe::mode();
-    }
-  }
   // Now, update the owned parameters.
   for (int i = 0; i < params_.size(); ++i) {
     if (param_owners_[i] >= 0) { continue; }
diff --git a/src/caffe/proto/caffe.proto b/src/caffe/proto/caffe.proto
index 5b21cf2..51e62a3 100644
--- a/src/caffe/proto/caffe.proto
+++ b/src/caffe/proto/caffe.proto
@@ -319,6 +319,7 @@ message LayerParameter {
   optional InfogainLossParameter infogain_loss_param = 116;
   optional InnerProductParameter inner_product_param = 117;
   optional LRNParameter lrn_param = 118;
+  optional LstmParameter lstm_param = 201;
   optional MemoryDataParameter memory_data_param = 119;
   optional MVNParameter mvn_param = 120;
   optional PoolingParameter pooling_param = 121;
@@ -332,6 +333,7 @@ message LayerParameter {
   optional TanHParameter tanh_param = 127;
   optional ThresholdParameter threshold_param = 128;
   optional WindowDataParameter window_data_param = 129;
+  optional WordvecParameter wordvec_param = 202;
 }
 
 // Message that stores parameters used to apply transformation
@@ -397,6 +399,7 @@ message ConcatParameter {
 
   // DEPRECATED: alias for "axis" -- does not support negative indexing.
   optional uint32 concat_dim = 1 [default = 1];
+  optional bool fast_lstm_concat = 3 [default = false];
 }
 
 // Message that stores parameters used by ContrastiveLossLayer
@@ -431,6 +434,26 @@ message ConvolutionParameter {
   optional Engine engine = 15 [default = DEFAULT];
 }
 
+message LstmParameter {
+  optional uint32 num_cells = 1;
+  optional FillerParameter input_weight_filler = 2; // The filler for the weight
+  optional FillerParameter input_gate_weight_filler = 3; // The filler for the weight
+  optional FillerParameter forget_gate_weight_filler = 4; // The filler for the weight
+  optional FillerParameter output_gate_weight_filler = 5; // The filler for the weight
+}
+
+message SoftmaxProductParameter {
+  optional uint32 num_output = 1; // The number of outputs for the layer
+  optional uint32 num_categories = 2; // The number of categories
+  optional FillerParameter weight_filler = 3; // The filler for the weight
+}
+
+message WordvecParameter {
+  optional uint32 dimension = 1;
+  optional uint32 vocab_size = 2;
+  optional FillerParameter weight_filler = 3; // The filler for the weight
+}
+
 // Message that stores parameters used by DataLayer
 message DataParameter {
   enum DB {
@@ -698,6 +721,7 @@ message SliceParameter {
   // (e.g., -1 for the last axis).
   // By default, SliceLayer concatenates blobs along the "channels" axis (1).
   optional int32 axis = 3 [default = 1];
+  optional bool fast_wordvec_slice = 4 [default = false];
   repeated uint32 slice_point = 2;
 
   // DEPRECATED: alias for "axis" -- does not support negative indexing.
diff --git a/src/caffe/solver.cpp b/src/caffe/solver.cpp
index 096980d..08323ff 100644
--- a/src/caffe/solver.cpp
+++ b/src/caffe/solver.cpp
@@ -474,6 +474,7 @@ void SGDSolver<Dtype>::ComputeUpdateValue() {
       Dtype local_rate = rate * net_params_lr[param_id];
       Dtype local_decay = weight_decay * net_params_weight_decay[param_id];
 
+      if (this->net_->param_owners()[param_id] >= 0) { continue; }
       if (local_decay) {
         if (regularization_type == "L2") {
           // add weight decay
@@ -494,13 +495,19 @@ void SGDSolver<Dtype>::ComputeUpdateValue() {
         }
       }
 
-      caffe_cpu_axpby(net_params[param_id]->count(), local_rate,
-                net_params[param_id]->cpu_diff(), momentum,
-                history_[param_id]->mutable_cpu_data());
-      // copy
-      caffe_copy(net_params[param_id]->count(),
-          history_[param_id]->cpu_data(),
-          net_params[param_id]->mutable_cpu_diff());
+      if (momentum > Dtype(0)) {
+        caffe_cpu_axpby(net_params[param_id]->count(), local_rate,
+                  net_params[param_id]->cpu_diff(), momentum,
+                  history_[param_id]->mutable_cpu_data());
+        // copy
+        caffe_copy(net_params[param_id]->count(),
+            history_[param_id]->cpu_data(),
+            net_params[param_id]->mutable_cpu_diff());
+      } else {
+        caffe_scal(net_params[param_id]->count(),
+            local_rate,
+            net_params[param_id]->mutable_cpu_diff());
+      }
     }
     break;
   case Caffe::GPU:
@@ -510,6 +517,7 @@ void SGDSolver<Dtype>::ComputeUpdateValue() {
       Dtype local_rate = rate * net_params_lr[param_id];
       Dtype local_decay = weight_decay * net_params_weight_decay[param_id];
 
+      if (this->net_->param_owners()[param_id] >= 0) { continue; }
       if (local_decay) {
         if (regularization_type == "L2") {
           // add weight decay
@@ -530,13 +538,19 @@ void SGDSolver<Dtype>::ComputeUpdateValue() {
         }
       }
 
-      caffe_gpu_axpby(net_params[param_id]->count(), local_rate,
-                net_params[param_id]->gpu_diff(), momentum,
-                history_[param_id]->mutable_gpu_data());
-      // copy
-      caffe_copy(net_params[param_id]->count(),
-          history_[param_id]->gpu_data(),
-          net_params[param_id]->mutable_gpu_diff());
+      if (momentum > Dtype(0)) {
+        caffe_gpu_axpby(net_params[param_id]->count(), local_rate,
+                  net_params[param_id]->gpu_diff(), momentum,
+                  history_[param_id]->mutable_gpu_data());
+        // copy
+        caffe_copy(net_params[param_id]->count(),
+            history_[param_id]->gpu_data(),
+            net_params[param_id]->mutable_gpu_diff());
+      } else {
+        caffe_gpu_scal(net_params[param_id]->count(),
+            local_rate,
+            net_params[param_id]->mutable_gpu_diff());
+      }
     }
 #else
     NO_GPU;
@@ -553,7 +567,9 @@ void SGDSolver<Dtype>::SnapshotSolverState(SolverState* state) {
   for (int i = 0; i < history_.size(); ++i) {
     // Add history
     BlobProto* history_blob = state->add_history();
-    history_[i]->ToProto(history_blob);
+    if (this->param_.momentum() > 0) {
+      history_[i]->ToProto(history_blob);
+    }
   }
 }
 
@@ -563,7 +579,9 @@ void SGDSolver<Dtype>::RestoreSolverState(const SolverState& state) {
       << "Incorrect length of history blobs.";
   LOG(INFO) << "SGDSolver: restoring history";
   for (int i = 0; i < history_.size(); ++i) {
-    history_[i]->FromProto(state.history(i));
+    if (this->param_.momentum() > 0) {
+      history_[i]->FromProto(state.history(i));
+    }
   }
 }
 
@@ -585,6 +603,7 @@ void NesterovSolver<Dtype>::ComputeUpdateValue() {
   switch (Caffe::mode()) {
   case Caffe::CPU:
     for (int param_id = 0; param_id < net_params.size(); ++param_id) {
+      if (this->net_->param_owners()[param_id] >= 0) { continue; }
       // save history momentum for stepping back
       caffe_copy(net_params[param_id]->count(),
           this->history_[param_id]->cpu_data(),
@@ -632,6 +651,7 @@ void NesterovSolver<Dtype>::ComputeUpdateValue() {
   case Caffe::GPU:
 #ifndef CPU_ONLY
     for (int param_id = 0; param_id < net_params.size(); ++param_id) {
+      if (this->net_->param_owners()[param_id] >= 0) { continue; }
       // save history momentum for stepping back
       caffe_copy(net_params[param_id]->count(),
           this->history_[param_id]->gpu_data(),
@@ -702,6 +722,7 @@ void AdaGradSolver<Dtype>::ComputeUpdateValue() {
   switch (Caffe::mode()) {
   case Caffe::CPU:
     for (int param_id = 0; param_id < net_params.size(); ++param_id) {
+      if (this->net_->param_owners()[param_id] >= 0) { continue; }
       Dtype local_rate = rate * net_params_lr[param_id];
       Dtype local_decay = weight_decay * net_params_weight_decay[param_id];
 
@@ -758,6 +779,7 @@ void AdaGradSolver<Dtype>::ComputeUpdateValue() {
   case Caffe::GPU:
 #ifndef CPU_ONLY
     for (int param_id = 0; param_id < net_params.size(); ++param_id) {
+      if (this->net_->param_owners()[param_id] >= 0) { continue; }
       Dtype local_rate = rate * net_params_lr[param_id];
       Dtype local_decay = weight_decay * net_params_weight_decay[param_id];
 
diff --git a/src/caffe/test/test_gradient_based_solver.cpp b/src/caffe/test/test_gradient_based_solver.cpp
index eb2569c..caea48f 100644
--- a/src/caffe/test/test_gradient_based_solver.cpp
+++ b/src/caffe/test/test_gradient_based_solver.cpp
@@ -322,23 +322,6 @@ class SGDSolverTest : public GradientBasedSolverTest<TypeParam> {
 
 TYPED_TEST_CASE(SGDSolverTest, TestDtypesAndDevices);
 
-TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdate) {
-  this->TestLeastSquaresUpdate();
-}
-
-TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateLROneTenth) {
-  typedef typename TypeParam::Dtype Dtype;
-  const Dtype kLearningRate = 0.1;
-  this->TestLeastSquaresUpdate(kLearningRate);
-}
-
-TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithWeightDecay) {
-  typedef typename TypeParam::Dtype Dtype;
-  const Dtype kLearningRate = 1.0;
-  const Dtype kWeightDecay = 0.5;
-  this->TestLeastSquaresUpdate(kLearningRate, kWeightDecay);
-}
-
 TYPED_TEST(SGDSolverTest, TestLeastSquaresUpdateWithMomentum) {
   typedef typename TypeParam::Dtype Dtype;
   const Dtype kLearningRate = 1.0;
diff --git a/src/caffe/test/test_lstm_layer.cpp b/src/caffe/test/test_lstm_layer.cpp
new file mode 100644
index 0000000..102b3ef
--- /dev/null
+++ b/src/caffe/test/test_lstm_layer.cpp
@@ -0,0 +1,120 @@
+#include <algorithm>
+#include <cstring>
+#include <vector>
+
+#include "gtest/gtest.h"
+
+#include "caffe/blob.hpp"
+#include "caffe/common.hpp"
+#include "caffe/filler.hpp"
+#include "caffe/vision_layers.hpp"
+
+#include "caffe/test/test_caffe_main.hpp"
+#include "caffe/test/test_gradient_check_util.hpp"
+
+#define NUM_CELLS 3
+#define BATCH_SIZE 4
+#define INPUT_DATA_SIZE 5
+
+using std::min;
+using std::max;
+
+namespace caffe {
+
+template <typename TypeParam>
+class LstmLayerTest : public MultiDeviceTest<TypeParam> {
+  typedef typename TypeParam::Dtype Dtype;
+
+ protected:
+  LstmLayerTest()
+      : epsilon_(Dtype(1e-5)),
+        blob_bottom_(new Blob<Dtype>()),
+        blob_bottom2_(new Blob<Dtype>()),
+        blob_top_(new Blob<Dtype>()),
+        blob_top2_(new Blob<Dtype>()) {}
+  virtual void SetUp() {
+    Caffe::set_random_seed(1601);
+    blob_bottom_->Reshape(BATCH_SIZE, INPUT_DATA_SIZE, 1, 1);
+    blob_bottom2_->Reshape(BATCH_SIZE, NUM_CELLS, 1, 1);
+    // fill the values
+    FillerParameter filler_param;
+    GaussianFiller<Dtype> filler(filler_param);
+    GaussianFiller<Dtype> filler2(filler_param);
+    filler.Fill(this->blob_bottom_);
+    filler2.Fill(this->blob_bottom2_);
+    blob_bottom_vec_.push_back(blob_bottom_);
+    blob_bottom_vec_.push_back(blob_bottom2_);
+    blob_top_vec_.push_back(blob_top_);
+    blob_top_vec_.push_back(blob_top2_);
+  }
+  virtual ~LstmLayerTest() { delete blob_bottom_; delete blob_bottom2_; delete blob_top_; delete blob_top2_; }
+  void ReferenceLstmForward(const Blob<Dtype>& blob_bottom,
+      const LayerParameter& layer_param, Blob<Dtype>* blob_top);
+
+  Dtype epsilon_;
+  Blob<Dtype>* const blob_bottom_;
+  Blob<Dtype>* const blob_bottom2_;
+  Blob<Dtype>* const blob_top_;
+  Blob<Dtype>* const blob_top2_;
+  vector<Blob<Dtype>*> blob_bottom_vec_;
+  vector<Blob<Dtype>*> blob_top_vec_;
+};
+
+template <typename TypeParam>
+void LstmLayerTest<TypeParam>::ReferenceLstmForward(
+    const Blob<Dtype>& blob_bottom, const LayerParameter& layer_param,
+    Blob<Dtype>* blob_top) {
+  typedef typename TypeParam::Dtype Dtype;
+  blob_top->Reshape(blob_bottom.num(), blob_bottom.channels(),
+      blob_bottom.height(), blob_bottom.width());
+  Dtype* top_data = blob_top->mutable_cpu_data();
+  LstmParameter lstm_param = layer_param.lstm_param();
+}
+
+TYPED_TEST_CASE(LstmLayerTest, TestDtypesAndDevices);
+
+TYPED_TEST(LstmLayerTest, TestSetupAcrossChannels) {
+  typedef typename TypeParam::Dtype Dtype;
+  LayerParameter layer_param;
+  LstmParameter* lstm_param = layer_param.mutable_lstm_param();
+  lstm_param->set_num_cells(NUM_CELLS);
+  lstm_param->mutable_input_weight_filler()->set_type("xavier");
+  lstm_param->mutable_input_gate_weight_filler()->set_type("xavier");
+  lstm_param->mutable_forget_gate_weight_filler()->set_type("xavier");
+  lstm_param->mutable_output_gate_weight_filler()->set_type("xavier");
+  LstmLayer<Dtype> layer(layer_param);
+  layer.SetUp(this->blob_bottom_vec_, this->blob_top_vec_);
+  EXPECT_EQ(this->blob_top_->num(), BATCH_SIZE);
+  EXPECT_EQ(this->blob_top_->channels(), NUM_CELLS);
+  EXPECT_EQ(this->blob_top_->height(), 1);
+  EXPECT_EQ(this->blob_top_->width(), 1);
+}
+
+TYPED_TEST(LstmLayerTest, TestGradientAcrossChannels) {
+  typedef typename TypeParam::Dtype Dtype;
+  LayerParameter layer_param;
+  LstmParameter* lstm_param = layer_param.mutable_lstm_param();
+  lstm_param->set_num_cells(NUM_CELLS);
+  lstm_param->mutable_input_weight_filler()->set_type("xavier");
+  lstm_param->mutable_input_gate_weight_filler()->set_type("xavier");
+  lstm_param->mutable_forget_gate_weight_filler()->set_type("xavier");
+  lstm_param->mutable_output_gate_weight_filler()->set_type("xavier");
+
+  LstmLayer<Dtype> layer(layer_param);
+  GradientChecker<Dtype> checker(1e-2, 1e-2);
+  layer.SetUp(this->blob_bottom_vec_, this->blob_top_vec_);
+  layer.Forward(this->blob_bottom_vec_, this->blob_top_vec_);
+  for (int i = 0; i < this->blob_top_->count(); ++i) {
+    this->blob_top_->mutable_cpu_diff()[i] = 1.;
+  }
+  for (int i = 0; i < this->blob_top2_->count(); ++i) {
+    this->blob_top2_->mutable_cpu_diff()[i] = 1.;
+  }
+  vector<bool> propagate_down(this->blob_bottom_vec_.size(), true);
+  layer.Backward(this->blob_top_vec_, propagate_down,
+                 this->blob_bottom_vec_);
+  checker.CheckGradientExhaustive(&layer, this->blob_bottom_vec_,
+      this->blob_top_vec_);
+}
+
+}  // namespace caffe
diff --git a/src/caffe/test/test_net.cpp b/src/caffe/test/test_net.cpp
index 08106e7..9d33089 100644
--- a/src/caffe/test/test_net.cpp
+++ b/src/caffe/test/test_net.cpp
@@ -1009,9 +1009,8 @@ TYPED_TEST(NetTest, TestSharedWeightsUpdate) {
   Blob<Dtype>* ip2_weights = this->net_->layers()[2]->blobs()[0].get();
   // Check that data blobs of shared weights share the same location in memory.
   EXPECT_EQ(ip1_weights->cpu_data(), ip2_weights->cpu_data());
-  // Check that diff blobs of shared weights are at different locations in
-  // memory.  (The diffs should be accumulated at update time.)
-  EXPECT_NE(ip1_weights->cpu_diff(), ip2_weights->cpu_diff());
+  // Check that diff blobs of shared weights share the same location in memory.
+  EXPECT_EQ(ip1_weights->cpu_diff(), ip2_weights->cpu_diff());
   this->net_->Forward(bottom);
   this->net_->Backward();
   // Compute the expected update as the data minus the two diffs.
@@ -1025,10 +1024,10 @@ TYPED_TEST(NetTest, TestSharedWeightsUpdate) {
   for (int i = 0; i < count; ++i) {
     EXPECT_NE(0, ip1_weights->cpu_diff()[i]);
     EXPECT_NE(0, ip2_weights->cpu_diff()[i]);
-    EXPECT_NE(ip1_weights->cpu_diff()[i], ip2_weights->cpu_diff()[i]);
+    EXPECT_EQ(ip1_weights->cpu_diff()[i], ip2_weights->cpu_diff()[i]);
   }
-  caffe_axpy(count, Dtype(1), ip2_weights->cpu_diff(),
-             shared_params.mutable_cpu_diff());
+  //caffe_axpy(count, Dtype(1), ip2_weights->cpu_diff(),
+             //shared_params.mutable_cpu_diff());
   caffe_axpy(count, Dtype(-1), shared_params.cpu_diff(),
              shared_params.mutable_cpu_data());
   const Dtype* expected_updated_params = shared_params.cpu_data();
@@ -1098,9 +1097,8 @@ TYPED_TEST(NetTest, TestSharedWeightsResume) {
   Blob<Dtype>* ip2_weights = this->net_->layers()[2]->blobs()[0].get();
   // Check that data blobs of shared weights share the same location in memory.
   EXPECT_EQ(ip1_weights->cpu_data(), ip2_weights->cpu_data());
-  // Check that diff blobs of shared weights are at different locations in
-  // memory.  (The diffs should be accumulated at update time.)
-  EXPECT_NE(ip1_weights->cpu_diff(), ip2_weights->cpu_diff());
+  // Check that diff blobs of shared weights share the same location in memory.
+  EXPECT_EQ(ip1_weights->cpu_diff(), ip2_weights->cpu_diff());
   this->net_->ForwardBackward(bottom);
   this->net_->Update();
   Blob<Dtype> shared_params;
@@ -1128,9 +1126,8 @@ TYPED_TEST(NetTest, TestSharedWeightsResume) {
   for (int i = 0; i < count; ++i) {
     EXPECT_FLOAT_EQ(shared_params.cpu_data()[i], ip1_weights->cpu_data()[i]);
   }
-  // Check that diff blobs of shared weights are at different locations in
-  // memory.  (The diffs should be accumulated at update time.)
-  EXPECT_NE(ip1_weights->cpu_diff(), ip2_weights->cpu_diff());
+  // Check that diff blobs of shared weights share the same location in memory.
+  EXPECT_EQ(ip1_weights->cpu_diff(), ip2_weights->cpu_diff());
 }
 
 TYPED_TEST(NetTest, TestParamPropagateDown) {
diff --git a/src/caffe/test/test_slice_layer.cpp b/src/caffe/test/test_slice_layer.cpp
index ccd0364..15bff31 100644
--- a/src/caffe/test/test_slice_layer.cpp
+++ b/src/caffe/test/test_slice_layer.cpp
@@ -38,7 +38,7 @@ class SliceLayerTest : public MultiDeviceTest<TypeParam> {
   }
 
   virtual void ReduceBottomBlobSize() {
-    blob_bottom_->Reshape(4, 5, 2, 2);
+    blob_bottom_->Reshape(4, 5, 2, 1);
     FillerParameter filler_param;
     GaussianFiller<Dtype> filler(filler_param);
     filler.Fill(this->blob_bottom_);
@@ -186,4 +186,17 @@ TYPED_TEST(SliceLayerTest, TestGradientAcrossChannels) {
     this->blob_top_vec_0_);
 }
 
+TYPED_TEST(SliceLayerTest, TestGradientAcrossHeight) {
+  typedef typename TypeParam::Dtype Dtype;
+  // Gradient checks are slow; reduce blob size.
+  this->ReduceBottomBlobSize();
+  LayerParameter layer_param;
+  layer_param.mutable_slice_param()->set_axis(2);
+  layer_param.mutable_slice_param()->set_fast_wordvec_slice(true);
+  SliceLayer<Dtype> layer(layer_param);
+  GradientChecker<Dtype> checker(1e-2, 1e-3);
+  checker.CheckGradientExhaustive(&layer, this->blob_bottom_vec_,
+    this->blob_top_vec_0_);
+}
+
 }  // namespace caffe
diff --git a/src/caffe/test/test_wordvec_layer.cpp b/src/caffe/test/test_wordvec_layer.cpp
new file mode 100644
index 0000000..85e20f0
--- /dev/null
+++ b/src/caffe/test/test_wordvec_layer.cpp
@@ -0,0 +1,100 @@
+#include <algorithm>
+#include <cstring>
+#include <vector>
+
+#include "gtest/gtest.h"
+
+#include "caffe/blob.hpp"
+#include "caffe/common.hpp"
+#include "caffe/filler.hpp"
+#include "caffe/vision_layers.hpp"
+
+#include "caffe/test/test_caffe_main.hpp"
+#include "caffe/test/test_gradient_check_util.hpp"
+
+using std::min;
+using std::max;
+
+#define BATCH_SIZE 2
+#define VOCAB_SIZE 10
+#define DIMENSION 15
+#define SENTENCE_LENGTH 3
+
+namespace caffe {
+
+template <typename TypeParam>
+class WordvecLayerTest : public MultiDeviceTest<TypeParam> {
+  typedef typename TypeParam::Dtype Dtype;
+
+ protected:
+  WordvecLayerTest()
+      : epsilon_(Dtype(1e-5)),
+        blob_bottom_(new Blob<Dtype>()),
+        blob_top_(new Blob<Dtype>()) {}
+  virtual void SetUp() {
+    Caffe::set_random_seed(1601);
+    blob_bottom_->Reshape(BATCH_SIZE, SENTENCE_LENGTH, 1, 1);
+    // fill the values
+    Dtype * bottom_data = this->blob_bottom_->mutable_cpu_data();
+    for (int n = 0; n < BATCH_SIZE; ++n) {
+      for (int i = 0; i < SENTENCE_LENGTH; ++i) {
+        bottom_data[i + n * SENTENCE_LENGTH] = caffe_rng_rand() % VOCAB_SIZE;
+      }
+    }
+    blob_bottom_vec_.push_back(blob_bottom_);
+    blob_top_vec_.push_back(blob_top_);
+  }
+  virtual ~WordvecLayerTest() { delete blob_bottom_; delete blob_top_; }
+  void ReferenceWordvecForward(const Blob<Dtype>& blob_bottom,
+      const LayerParameter& layer_param, Blob<Dtype>* blob_top);
+
+  Dtype epsilon_;
+  Blob<Dtype>* const blob_bottom_;
+  Blob<Dtype>* const blob_top_;
+  vector<Blob<Dtype>*> blob_bottom_vec_;
+  vector<Blob<Dtype>*> blob_top_vec_;
+};
+
+template <typename TypeParam>
+void WordvecLayerTest<TypeParam>::ReferenceWordvecForward(
+    const Blob<Dtype>& blob_bottom, const LayerParameter& layer_param,
+    Blob<Dtype>* blob_top) {
+  typedef typename TypeParam::Dtype Dtype;
+  blob_top->Reshape(blob_bottom.num(), blob_bottom.channels(),
+      blob_bottom.height(), blob_bottom.width());
+  Dtype* top_data = blob_top->mutable_cpu_data();
+  WordvecParameter wordvec_param = layer_param.wordvec_param();
+}
+
+TYPED_TEST_CASE(WordvecLayerTest, TestDtypesAndDevices);
+
+TYPED_TEST(WordvecLayerTest, TestSetupAcrossChannels) {
+  typedef typename TypeParam::Dtype Dtype;
+  LayerParameter layer_param;
+  WordvecParameter* wordvec_param = layer_param.mutable_wordvec_param();
+  wordvec_param->set_vocab_size(VOCAB_SIZE);
+  wordvec_param->set_dimension(DIMENSION);
+  wordvec_param->mutable_weight_filler()->set_type("xavier");
+  WordvecLayer<Dtype> layer(layer_param);
+  layer.SetUp(this->blob_bottom_vec_, this->blob_top_vec_);
+  EXPECT_EQ(this->blob_top_->num(), BATCH_SIZE);
+  EXPECT_EQ(this->blob_top_->channels(), DIMENSION);
+  EXPECT_EQ(this->blob_top_->height(), SENTENCE_LENGTH);
+  EXPECT_EQ(this->blob_top_->width(), 1);
+}
+
+TYPED_TEST(WordvecLayerTest, TestGradientAcrossChannels) {
+  typedef typename TypeParam::Dtype Dtype;
+  LayerParameter layer_param;
+  WordvecParameter* wordvec_param = layer_param.mutable_wordvec_param();
+  wordvec_param->set_vocab_size(VOCAB_SIZE);
+  wordvec_param->set_dimension(DIMENSION);
+  wordvec_param->mutable_weight_filler()->set_type("xavier");
+  WordvecLayer<Dtype> layer(layer_param);
+
+  GradientChecker<Dtype> checker(1e-2, 1e-2, 1601);
+  checker.CheckGradientExhaustive(&layer, this->blob_bottom_vec_,
+                 this->blob_top_vec_, -2);
+}
+
+}  // namespace caffe
diff --git a/src/caffe/util/math_functions.cu b/src/caffe/util/math_functions.cu
index 43e65eb..1eb7959 100644
--- a/src/caffe/util/math_functions.cu
+++ b/src/caffe/util/math_functions.cu
@@ -12,6 +12,36 @@
 
 namespace caffe {
 
+template<>
+void caffe_gpu_transpose<float>(const int M, const int N, const float* A, float* C) {
+  // C is MxN
+  // Takes as input a M x N matrix A stored in row major order and returns
+  // the same M x N matrix C stored in column major order
+  CHECK_NE(A, C);
+  int lda = N;
+  int ldb = M;
+  int ldc = M;
+  const float alpha = 1.0f;
+  const float beta = 0.0f;
+  CUBLAS_CHECK(cublasSgeam(Caffe::cublas_handle(), CUBLAS_OP_T, CUBLAS_OP_N, M, N, &alpha, A, lda, &beta,
+      NULL, ldb, C, ldc));
+}
+
+template<>
+void caffe_gpu_transpose<double>(const int M, const int N, const double* A, double* C) {
+  // C is MxN
+  // Takes as input a M x N matrix A stored in row major order and returns
+  // the same M x N matrix C stored in column major order
+  CHECK_NE(A, C);
+  int lda = N;
+  int ldb = M;
+  int ldc = M;
+  const double alpha = 1.0f;
+  const double beta = 0.0f;
+  CUBLAS_CHECK(cublasDgeam(Caffe::cublas_handle(), CUBLAS_OP_T, CUBLAS_OP_N, M, N, &alpha, A, lda, &beta,
+      NULL, ldb, C, ldc));
+}
+
 template <>
 void caffe_gpu_gemm<float>(const CBLAS_TRANSPOSE TransA,
     const CBLAS_TRANSPOSE TransB, const int M, const int N, const int K,
